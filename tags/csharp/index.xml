<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSharp on MLAcookie</title><link>https://mlacookie.github.io/tags/csharp/</link><description>Recent content in CSharp on MLAcookie</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 25 Oct 2024 02:17:15 +0800</lastBuildDate><atom:link href="https://mlacookie.github.io/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>WPF中怎么自定义控件</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E4%B8%AD%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/</link><pubDate>Fri, 25 Oct 2024 02:17:15 +0800</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E4%B8%AD%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/</guid><description>&lt;h2 id="0x00-前言">&amp;lt;0x00&amp;gt; 前言
&lt;/h2>&lt;p>WPF开发中，总是会有些创建自定义控件的需求&lt;br>
毕竟原生的控件总是不够用的&lt;/p>
&lt;h2 id="0x01-原理">&amp;lt;0x01&amp;gt; 原理
&lt;/h2>&lt;p>WPF使用xaml作为设计语言&lt;br>
而xaml负责的可以简单理解成将控件实例化到对应的布局上，然后设定控件的一些属性&lt;br>
既然是实例化，那么本质上就是创建了一个新的对象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--随便定义一个按钮--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;button&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;123&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实在编译器看来，就相当于这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Button b = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以我们自定义控件，首先需要有一个类定义控件的属性，然后用xaml去描述控件行为&lt;/p>
&lt;p>那么怎么用xaml描述控件行为呢&lt;br>
在修改控件的style的时候，我们可以把自己定义的style写到一个ResourceDictionary中&lt;br>
然后通过合并ResourceDictionary来将自己style应用到不同的地方&lt;br>
xaml描述控件行为其实也就是写一个style，所以可以采用一样的思路&lt;/p>
&lt;h2 id="0x02-示例带标签的文本输入框">&amp;lt;0x02&amp;gt; 示例：带标签的文本输入框
&lt;/h2>&lt;p>这个感觉还是很常见的需求，有些时候需要文本输入框前面带一个标签，表示输入的是什么&lt;br>
也就是说，我们要做的控件跟下面xaml代码效果是等价的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,4&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBox&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="定义控件">定义控件
&lt;/h3>&lt;p>首先需要定义一个类，表示我们的类与其他类的不同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Controls/TextBoxWithLable/TextBoxWithLable.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Controls;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> XamlTest.Controls;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TextBoxWithLable&lt;/span> : Control
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 后面还有别的代码，但这里先不需要&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就可以了&lt;/p>
&lt;h3 id="描述控件">描述控件
&lt;/h3>&lt;p>然后创建一个资源字典，用来描述我们的控件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- Controls/TextBoxWithLable/TextBoxWithLable.xaml --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;ResourceDictionary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:controls=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:XamlTest.Controls&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">x:Key=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Default_TextBoxWithLableStyle&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{x:Type controls:TextBoxWithLable}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Template&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{x:Type controls:TextBoxWithLable}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,4&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBox&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">BasedOn=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{StaticResource Default_TextBoxWithLableStyle}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{x:Type controls:TextBoxWithLable}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/ResourceDictionary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>就像前面说的，通过style的模板来让xaml知道需要实例化什么控件&lt;br>
这里先是定义了一个&lt;code>Default_TextBoxWithLableStyle&lt;/code>的style，然后再写全局应用&lt;br>
这样写的话万一用户想再基于默认样式自定义的话就比较方便了&lt;/p>
&lt;h3 id="合并资源字典">合并资源字典
&lt;/h3>&lt;p>上面的写好之后，如果直接使用会发现还是显示不了的&lt;br>
这是因为我们还没有合并资源字典&lt;/p>
&lt;p>这里我建议在控件的文件夹中加一个文件，其中去合并所有控件的资源字典&lt;br>
然后再在&lt;code>app.xaml&lt;/code>中合并这个整合的资源字典文件&lt;br>
毕竟控件开发一般会开发很多，全写&lt;code>app.xaml&lt;/code>会很乱&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- Controls/ControlsDictionary.xaml --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;ResourceDictionary&lt;/span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ResourceDictionary&lt;/span> &lt;span style="color:#a6e22e">Source=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;pack://application:,,,/Controls/TextBoxWithLable/TextBoxWithLable.xaml&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/ResourceDictionary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在&lt;code>app.xaml&lt;/code>中合并&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- app.xaml --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x:Class=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;XamlTest.App&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:controls=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:XamlTest.Controls&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:local=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:XamlTest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">StartupUri=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MainWindow.xaml&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Application.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ResourceDictionary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ResourceDictionary&lt;/span> &lt;span style="color:#a6e22e">Source=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;pack://application:,,,/Controls/ControlsDictionary.xaml&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ResourceDictionary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Application.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Application&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的source属性出现的很像网址的东西是资源url，我暂时没研究的这么全&lt;/p>
&lt;h3 id="为控件创建属性">为控件创建属性
&lt;/h3>&lt;p>现在控件有了，但是如果在控件中输入文字我们是很难获取到的&lt;br>
而且我们也修改不了文本框前面的lable部分
这是因为我们还没有为控件创建属性，这时候就需要修改&lt;code>TextBoxWithLable.cs&lt;/code>文件了&lt;/p>
&lt;p>我们需要为我们的控件添加依赖属性&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Controls/TextBoxWithLable/TextBoxWithLable.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Controls;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> XamlTest.Controls;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TextBoxWithLable&lt;/span> : Control
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#region&lt;/span> LableText_propdp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> LableText
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">string&lt;/span>)GetValue(LableTextProperty); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { SetValue(LableTextProperty, &lt;span style="color:#66d9ef">value&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> DependencyProperty LableTextProperty =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DependencyProperty.Register(&lt;span style="color:#e6db74">&amp;#34;LableText&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">typeof&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>), &lt;span style="color:#66d9ef">typeof&lt;/span>(TextBoxWithLable), &lt;span style="color:#66d9ef">new&lt;/span> PropertyMetadata(&lt;span style="color:#66d9ef">null&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#endregion&lt;/span> LableText_propdp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#region&lt;/span> InputText_propdp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> InputText
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">string&lt;/span>)GetValue(InputTextProperty); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { SetValue(InputTextProperty, &lt;span style="color:#66d9ef">value&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> DependencyProperty InputTextProperty =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DependencyProperty.Register(&lt;span style="color:#e6db74">&amp;#34;InputText&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">typeof&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>), &lt;span style="color:#66d9ef">typeof&lt;/span>(TextBoxWithLable), &lt;span style="color:#66d9ef">new&lt;/span> PropertyMetadata(&lt;span style="color:#66d9ef">null&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#endregion&lt;/span> InputText_propdp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里讲一个小技巧
创建依赖属性的代码确实多，但也挺公式的&lt;br>
所以vs提供了一个模板，只要输入propdp然后敲两下tab就可以插入模板&lt;br>
然后逐个替换即可&lt;/p>
&lt;p>然后修改&lt;code>TextBoxWithLable.xaml&lt;/code>，绑定我们的依赖属性&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- Controls/TextBoxWithLable/TextBoxWithLable.xaml --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;ResourceDictionary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:controls=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:XamlTest.Controls&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">x:Key=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Default_TextBoxWithLableStyle&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{x:Type controls:TextBoxWithLable}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Template&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{x:Type controls:TextBoxWithLable}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,4&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{TemplateBinding LableText}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBox&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=InputText, Mode=TwoWay}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">BasedOn=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{StaticResource Default_TextBoxWithLableStyle}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{x:Type controls:TextBoxWithLable}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/ResourceDictionary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里需要注意的是，TemplateBinding是单向绑定&lt;br>
也就是相当于只能&lt;code>绑定源-&amp;gt;控件&lt;/code>，这对TextBlock是没啥问题的&lt;br>
但对于TextBox，我们希望里面的内容也可以传回来，这时候就不能只靠TemplateBinding&lt;br>
所以TextBox这里的绑定就写得很长，主要就是要写一个Mode&lt;br>
（TemplateBinding本身就是一种简写）&lt;/p>
&lt;p>然后这个控件就创建完成了&lt;/p></description></item><item><title>相对优雅得C#调用Win32API</title><link>https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/</link><pubDate>Sun, 21 Jul 2024 21:08:14 +0800</pubDate><guid>https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/</guid><description>&lt;p>今天有人找我解决一些软件相关的问题，然后发现会牵扯到一些Win32的API&lt;br>
一般调用Win32API都是用C++方便的，而且微软给的文档也是C++的&lt;br>
我虽然对C++不是很熟，但对C#熟啊&lt;/p>
&lt;p>在C#中，我们可以通过&lt;code>P/Invoke&lt;/code>去做动态库的互操作&lt;br>
但对于Win32API，如果自己写&lt;code>P/Invoke&lt;/code>，里面就有很多不确定的东西&lt;br>
光是那个DllImport特性里面的参数就不是很好填&lt;/p>
&lt;p>那C#开发者是不是很难做Win32开发呢，那也不是&lt;br>
在Nuget上有很多别的大佬包装好的Win32库，安装完可以直接调用&lt;br>
但Win32中有超级多的API，这会导致代码提示里面会多出非常多东西，确实是有点干扰了&lt;/p>
&lt;p>但好在微软也提供了一个解决方案，&lt;a class="link" href="https://github.com/microsoft/CsWin32" target="_blank" rel="noopener"
>CsWin32&lt;/a>&lt;br>
这个是基于C#&lt;code>源生成器&lt;/code>的Win32API封装器&lt;br>
就是需要什么API，它就去生成那些API的&lt;code>P/Invoke&lt;/code>代码&lt;br>
并且生成的质量还挺高的，保留原本的调用风格的同时，尽可能去迎合C#的开发体验&lt;/p>
&lt;h2 id="0x00-安装cswin32">&amp;lt;0x00&amp;gt; 安装CsWin32
&lt;/h2>&lt;p>因为会用到C#的源生成器，所以最好使用VS2022并且相对新的版本，不然代码提示之类的会出问题&lt;br>
VSCode的源生成器体验也是不错的，这个直接装&lt;code>C# kit&lt;/code>插件就可以了&lt;/p>
&lt;p>直接在Nuget中搜索CsWin32，包名是Microsoft.Windows.CsWin32&lt;br>
这个包最低支持到&lt;code>.net framework 4.5&lt;/code>也即&lt;code>.NET Standard 2.0&lt;/code>&lt;br>
对于这个版本，还需要安装&lt;code>System.Memory&lt;/code>&lt;br>
如果是&lt;code>.NET Standard 2.1&lt;/code>及以上，也即&lt;code>.net 5.0&lt;/code>及以上的版本，那么就不需要安装&lt;br>
（如果是新项目的话应该会用新版本的框架吧）&lt;/p>
&lt;h2 id="0x01-如何使用">&amp;lt;0x01&amp;gt; 如何使用
&lt;/h2>&lt;h3 id="添加需要的api">添加需要的API
&lt;/h3>&lt;p>首先是要告诉源生成器要生成哪些API的封装&lt;br>
在项目根目录新建叫&lt;code>NativeMethods.txt&lt;/code>的文件&lt;br>
&lt;img src="https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/1.png"
width="240"
height="95"
srcset="https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/1_hu3330581896057511162.png 480w, https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/1_hu13047833802146296135.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;br>
在里面可以添加你需要添加的Win32函数或者结构的名字&lt;/p>
&lt;pre tabindex="0">&lt;code>PssCaptureSnapshot
PssQuerySnapshot
PSS_PROCESS_INFORMATION
PSS_HANDLE_INFORMATION
PSS_VA_CLONE_INFORMATION
&lt;/code>&lt;/pre>&lt;p>这里的示例是Windows&lt;a class="link" href="https://learn.microsoft.com/zh-cn/windows/win32/api/_proc_snap/" target="_blank" rel="noopener"
>进程快照&lt;/a>相关的API，使用的API也不多，仅做演示作用&lt;/p>
&lt;h3 id="简单解释下使用的api">简单解释下使用的API
&lt;/h3>&lt;h4 id="psscapturesnapshot">PssCaptureSnapshot
&lt;/h4>&lt;p>捕获目标进程的快照&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>DWORD &lt;span style="color:#a6e22e">PssCaptureSnapshot&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [in] HANDLE ProcessHandle,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [in] PSS_CAPTURE_FLAGS CaptureFlags,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [in, optional] DWORD ThreadContextFlags,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [out] HPSS &lt;span style="color:#f92672">*&lt;/span>SnapshotHandle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ProcessHandle&lt;/code>目标进程的句柄&lt;br>
&lt;code>CaptureFlags&lt;/code>指定要捕获的标志&lt;br>
&lt;code>ThreadContextFlags&lt;/code>如果 CaptureFlags 指定线程上下文，则要捕获的 CONTEXT 记录标志&lt;br>
&lt;code>SnapshotHandle&lt;/code>返回此函数捕获的快照的句柄&lt;/p>
&lt;p>函数返回的是&lt;code>winerror.h&lt;/code>中定义的错误代码，无错误是&lt;code>ERROR_SUCCESS&lt;/code>&lt;/p>
&lt;h4 id="pssquerysnapshot">PssQuerySnapshot
&lt;/h4>&lt;p>查询捕获的快照的信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>DWORD &lt;span style="color:#a6e22e">PssQuerySnapshot&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [in] HPSS SnapshotHandle,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [in] PSS_QUERY_INFORMATION_CLASS InformationClass,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [out] &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>Buffer,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [in] DWORD BufferLength
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>SnapshotHandle&lt;/code>要查询的快照的句柄&lt;br>
&lt;code>InformationClass&lt;/code>用于选择要查询的信息&lt;br>
&lt;code>Buffer&lt;/code>此函数提供的信息，类型由&lt;code>InformationClass&lt;/code>决定&lt;br>
&lt;code>BufferLength&lt;/code>缓冲区的大小（以字节为单位）&lt;/p>
&lt;p>函数返回的是&lt;code>winerror.h&lt;/code>中定义的错误代码，无错误是&lt;code>ERROR_SUCCESS&lt;/code>&lt;/p>
&lt;p>剩下的是一些结构，东西多就不细讲了，跟本文关系不大，具体就看文档吧&lt;/p>
&lt;h3 id="在代码中使用win32api">在代码中使用Win32API
&lt;/h3>&lt;p>这里做一个使用Win32API查询进程PID的示例&lt;br>
（虽然C#的Process类对象本身就可以直接查询）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Diagnostics;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Windows.Win32;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Windows.Win32.System.Diagnostics.ProcessSnapshotting;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用C#自带的Process类型获取记事本进程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Process test = Process.GetProcessesByName(&lt;span style="color:#e6db74">&amp;#34;notepad&amp;#34;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 声明一个查询flags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PSS_CAPTURE_FLAGS flags = PSS_CAPTURE_FLAGS.PSS_CAPTURE_THREADS;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用Win32API来捕获进程快照&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PInvoke.PssCaptureSnapshot(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test.SafeHandle,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flags,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">out&lt;/span> HPSS snapshotHandle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 声明查询进程基本信息的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PSS_PROCESS_INFORMATION info;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 涉及到指针操作，所以要用unsafe块包装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用Win32API来查询进程快照信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PInvoke.PssQuerySnapshot(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> snapshotHandle,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PSS_QUERY_INFORMATION_CLASS.PSS_QUERY_PROCESS_INFORMATION,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;amp;info,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">uint&lt;/span>)&lt;span style="color:#66d9ef">sizeof&lt;/span>(PSS_PROCESS_INFORMATION));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(info.ProcessId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/3.png"
width="829"
height="166"
srcset="https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/3_hu4089936009756936439.png 480w, https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/3_hu9622210321053220712.png 1024w"
loading="lazy"
alt="运行结果"
class="gallery-image"
data-flex-grow="499"
data-flex-basis="1198px"
>&lt;/p>
&lt;p>确实是获取到了记事本的PID&lt;/p>
&lt;p>而且观察代码，不难发现，CsWin32会非常智能地使用C#自带的类型&lt;br>
比如说Process类型里面的SafeHandle属性，这个返回的是&lt;code>SafeProcessHandle&lt;/code>&lt;br>
这个虽然它的命名空间是&lt;code>Microsoft.Win32.SafeHandles&lt;/code>，但确实是C#本身就有的&lt;br>
对于C#不带的类型，只有使用的API需要这些类型传参，CsWin32才会去生成对应的代码&lt;/p>
&lt;h2 id="0x02-一些不知道类型的枚举">&amp;lt;0x02&amp;gt; 一些不知道类型的枚举
&lt;/h2>&lt;p>如果你需要使用某个枚举，但不知道是什么类型，CsWin32可以自动指出具体类型&lt;br>
比如前面提到那两个API的返回值是&lt;code>winerror.h&lt;/code>中定义的错误代码，但我们不知道这是什么类&lt;br>
这时候可以在&lt;code>NativeMethods.txt&lt;/code>里面直接加上&lt;code>ERROR_SUCCESS&lt;/code>&lt;br>
CsWin32会抛出警告：应该使用正确的声明&lt;br>
&lt;img src="https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/2.png"
width="615"
height="24"
srcset="https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/2_hu3942554170736800697.png 480w, https://mlacookie.github.io/article/posts/2024/%E7%9B%B8%E5%AF%B9%E4%BC%98%E9%9B%85%E5%BE%97csharp%E8%B0%83%E7%94%A8win32api/picture/2_hu12287234937168092029.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="2562"
data-flex-basis="6150px"
>&lt;br>
最后也指出正确的声明是&lt;code>WIN32_ERROR&lt;/code>，文件里改好就行&lt;br>
这里对上面的代码稍作修改作为示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Diagnostics;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Windows.Win32;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Windows.Win32.Foundation;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Windows.Win32.System.Diagnostics.ProcessSnapshotting;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Process test = Process.GetProcessesByName(&lt;span style="color:#e6db74">&amp;#34;notepad&amp;#34;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PSS_CAPTURE_FLAGS flags = PSS_CAPTURE_FLAGS.PSS_CAPTURE_THREADS;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PInvoke.PssCaptureSnapshot(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test.SafeHandle,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flags,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">out&lt;/span> HPSS snapshotHandle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PSS_PROCESS_INFORMATION info;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 添加错误码的声明&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint&lt;/span> errorCode;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取错误码返回值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errorCode = PInvoke.PssQuerySnapshot(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> snapshotHandle,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PSS_QUERY_INFORMATION_CLASS.PSS_QUERY_PROCESS_INFORMATION,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;amp;info,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">uint&lt;/span>)&lt;span style="color:#66d9ef">sizeof&lt;/span>(PSS_PROCESS_INFORMATION));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(info.ProcessId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 跟WIN32_ERROR.ERROR_SUCCESS做比较，返回True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine((WIN32_ERROR)errorCode == WIN32_ERROR.ERROR_SUCCESS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然头铁不改正确的声明也没关系，也是这样使用&lt;/p>
&lt;p>对于其他不知道怎么声明的枚举也可以这样让CsWin32去找&lt;/p></description></item><item><title>关于我用C#写Opencv这件事-03</title><link>https://mlacookie.github.io/article/categories/opencv/%E5%85%B3%E4%BA%8E%E6%88%91%E7%94%A8c%23%E5%86%99opencv%E8%BF%99%E4%BB%B6%E4%BA%8B-03/</link><pubDate>Mon, 18 Mar 2024 12:59:53 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/opencv/%E5%85%B3%E4%BA%8E%E6%88%91%E7%94%A8c%23%E5%86%99opencv%E8%BF%99%E4%BB%B6%E4%BA%8B-03/</guid><description>&lt;p>（说实话我有点后悔用C#写Opencv了）
今天我们神秘的数字图像处理做实验了&lt;br>
虽然东西是挺简单的，但因为我用的是C#，导致很多现成的代码都没法抄&lt;br>
再加上虽然&lt;code>Opencvsharp4&lt;/code>宣称是和C++的API是对应的&lt;br>
但实际上的开发体验差别真挺大的，很多API的调用方法是不一样的&lt;br>
（有些调用像C++，有些调用有自己的特色）&lt;br>
基本上所有的代码都要自己去试，写着挺痛苦的&lt;br>
所以还是讲讲我们做了啥吧&lt;/p>
&lt;h2 id="0x00读取图像">&amp;lt;0x00&amp;gt;读取图像
&lt;/h2>&lt;p>这个其实是简单的&lt;br>
假设需要读取一个图片，比方说是&lt;code>D:/Test/1.png&lt;/code>&lt;br>
通过Cv2.ImRead()方法就可以读取为内置的矩阵类型了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个方法可以读取一般常见的图片格式&lt;/p>
&lt;p>然后，这个方法还可以传入第二个参数，用来控制读取的行为&lt;br>
比方说我们希望获取的是图像的灰度图&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat grayImage = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>, ImreadModes.Grayscale);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ImreadModes&lt;/code>是一个枚举类型，有很多常用的读取行为&lt;br>
一般也就是这个&lt;code>ImreadModes.Grayscale&lt;/code>获取灰度图用的多&lt;br>
Cv2.ImRead()这个参数的默认值是&lt;code>ImreadModes.Color&lt;/code>，即默认读入带颜色的图像&lt;/p>
&lt;h2 id="0x01将有色图转换为灰度图">&amp;lt;0x01&amp;gt;将有色图转换为灰度图
&lt;/h2>&lt;p>前面提到，我们可以指定读取图片时保存为灰度图&lt;br>
那有没有别的在运行时从有色图转换为灰度图的方法呢？&lt;br>
肯定是有的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat grayImage = iamge.CvtColor(ColorConversionCodes.RGB2GRAY);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样也完成了转换&lt;/p>
&lt;p>还有一个等价的写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat grayImage = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cv2.CvtColor(image, grayImage, ColorConversionCodes.RGB2GRAY);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样写也行&lt;/p>
&lt;p>&lt;code>CvtColor()&lt;/code>方法中，传入的&lt;code>ColorConversionCodes&lt;/code>也是个枚举类型&lt;br>
里面也有很多常用的转换方式，有什么&lt;code>RGB2BGR&lt;/code>之类的&lt;/p>
&lt;h2 id="0x02图像按位取反">&amp;lt;0x02&amp;gt;图像按位取反
&lt;/h2>&lt;p>这个在C#中的写法确实跟C++之类的挺像的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat inversedImage = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cv2.BitwiseNot(image, inversedImage);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然也可以自己写对每个位的操作，但这样就太麻烦了&lt;/p>
&lt;h2 id="0x03图像对比度增强">&amp;lt;0x03&amp;gt;图像对比度增强
&lt;/h2>&lt;p>关于图像对比度增强的办法有很多，我这里用的是&lt;code>限制对比度自适应直方图均衡化&lt;/code>的办法&lt;br>
（原理我也说不出来，没细学，还是看别的大佬的文章吧）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat enhancedImage = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CLAHE clahe = Cv2.CreateCLAHE(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> OpenCvSharp.Size(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clahe.Apply(image, enhancedImage);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个参数表示像素出现的阈值，应该是百分比阈值，默认是40&lt;br>
第二个参数表示重新分配的大小&lt;/p>
&lt;p>&lt;code>限制对比度自适应直方图均衡化&lt;/code>的大体过程如下&lt;br>
首先会统计每种像素的出现次数&lt;br>
然后跟设置的阈值对比，如果超过阈值，会把多余的像素按设定的大小重新分配给别的类型的像素&lt;br>
总之确实是能增强对比度（真说不大明白）&lt;/p>
&lt;h2 id="0x04图像二值化">&amp;lt;0x04&amp;gt;图像二值化
&lt;/h2>&lt;p>所谓二值化算是极端化的灰度图，只有黑白两种颜色&lt;br>
代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat binarizedImage = image.Threshold(&lt;span style="color:#ae81ff">127&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>, ThresholdTypes.Binary);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也有稍微麻烦点的写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat binarizedImage = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cv2.Threshold(image, binarizedImage, &lt;span style="color:#ae81ff">127&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>, ThresholdTypes.Binary);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Threshold()&lt;/code>第一个数字是阈值，第二个值算是默认值，具体行为看第三个参数&lt;br>
&lt;code>ThresholdTypes&lt;/code>是一个枚举类型，表示如何处理图像&lt;br>
二值化的时候这个值取&lt;code>ThresholdTypes.Binary&lt;/code>，表示像素值大于阈值时用默认值，否则赋值0&lt;br>
比方说在二值化的时候，某像素值为128&amp;gt;127，那么就会把它的值变为255&lt;br>
其他的行为这里就不展开了&lt;/p>
&lt;h2 id="0x05图片相加">&amp;lt;0x05&amp;gt;图片相加
&lt;/h2>&lt;h3 id="同大小图片相加">同大小图片相加
&lt;/h3>&lt;p>这个其实很简单，毕竟在Opencv眼里，所有的图片都是矩阵，相加不是很简单嘛&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat A = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat B = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/2.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat addedImage = A + B;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>（就这样写就可以了）&lt;/p>
&lt;p>不嫌烦的话还有下面的写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat addedImage = A.Add(B);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat addedImage = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cv2.Add(A, B, addedImage);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="不同大小的图片相加">不同大小的图片相加
&lt;/h3>&lt;p>这些&lt;code>Add()&lt;/code>方法要求矩阵大小一致，相当于要求图片大小一致&lt;/p>
&lt;p>那如果我们就是要不同大小图片相加，就要多做些处理&lt;br>
我的处理方式是&lt;br>
先在比较大的图片中扣出跟小图片一样大小的部分&lt;br>
抠出的图和小图片相加，然后再替换掉大图片扣掉的部分&lt;/p>
&lt;h4 id="怎么抠出图像">怎么抠出图像
&lt;/h4>&lt;p>&lt;code>Opencvsharp4&lt;/code>中有个&lt;code>Rect&lt;/code>类型，可以用来划出需要的部分&lt;br>
类型声明示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Rect rect = &lt;span style="color:#66d9ef">new&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前面表示起始位置，也即矩形的左上角的点坐标，后面两个参数表示矩形大小&lt;/p>
&lt;p>对于一个图像，假设我们需要在图像&lt;code>(100, 100)&lt;/code>的地方扣出&lt;code>200*200&lt;/code>大小的图片&lt;br>
代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat image = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat temp = image[&lt;span style="color:#66d9ef">new&lt;/span> Rect(&lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>)];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是，这里的&lt;code>temp&lt;/code>获取到的是&lt;code>image&lt;/code>对应区域的引用&lt;br>
对&lt;code>temp&lt;/code>的所有修改也会反应到&lt;code>image&lt;/code>上&lt;br>
如果需要新建一个矩阵，需要用&lt;code>CopyTo()&lt;/code>方法&lt;/p>
&lt;h4 id="完整的代码">完整的代码
&lt;/h4>&lt;p>有了上面的基础，现在给出完整的图片相加代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>Mat L = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/1.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat S = Cv2.ImRead(&lt;span style="color:#e6db74">&amp;#34;D:/Test/2.png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//还需要注意框选的区域不能超过大图片的范围&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mat temp = image[&lt;span style="color:#66d9ef">new&lt;/span> Rect(&lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, S.Width, S.Height)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>temp = temp + s;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就可以了，至于图片相减也是差不多这样的代码&lt;/p></description></item><item><title>关于我用C#写Opencv这件事-02</title><link>https://mlacookie.github.io/article/categories/opencv/%E5%85%B3%E4%BA%8E%E6%88%91%E7%94%A8c%23%E5%86%99opencv%E8%BF%99%E4%BB%B6%E4%BA%8B-02/</link><pubDate>Sun, 17 Mar 2024 02:19:35 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/opencv/%E5%85%B3%E4%BA%8E%E6%88%91%E7%94%A8c%23%E5%86%99opencv%E8%BF%99%E4%BB%B6%E4%BA%8B-02/</guid><description>&lt;p>这次来讲讲怎么在Godot中使用Opencv&lt;/p>
&lt;p>大体还是很简单的，因为Godot项目中是可以使用Nuget的
（Godot的C#后端比较新）
所以直接在项目中引用Opencvsharp4的包就好了
而且大体上的代码也是不变的
基本就是多一步转换成&lt;code>ImageTexture&lt;/code>就可以&lt;/p>
&lt;p>还是以捕获摄像头为例
首先需要一个&lt;code>Sprite2D&lt;/code>节点
创建一个脚本与之绑定
然后脚本代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Godot;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> OpenCvSharp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CameraBehavior&lt;/span> : Sprite2D
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">readonly&lt;/span> VideoCapture camera;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">readonly&lt;/span> Mat frame = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>   
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> _Ready()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>     camera = &lt;span style="color:#66d9ef">new&lt;/span> VideoCapture(index, captureAPI);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> _Process(&lt;span style="color:#66d9ef">double&lt;/span> delta)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>     &lt;span style="color:#75715e">//用_Process()代替了原来的while循环&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>     camera.Read(frame);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">if&lt;/span> (frame.Empty())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            Debug.WriteLine(&lt;span style="color:#e6db74">&amp;#34;No Image&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">var&lt;/span> bytes = frame.ToBytes();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        Image img = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        img.LoadPngFromBuffer(bytes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        Texture = ImageTexture.CreateFromImage(img);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，与之绑定的&lt;code>Sprite2D&lt;/code>就可以显示摄像头捕获的画面了&lt;/p>
&lt;p>然后调整下摄像头捕获画面的大小和&lt;code>Sprite2D&lt;/code>的位置&lt;/p>
&lt;p>Opencv中别的处理也可以用类似的方式实现
这样就相当于Godot负责前端的显示渲染，C#代码部分负责后端的逻辑算法处理&lt;/p>
&lt;p>（这篇写得比较水，下一篇来个大的）&lt;/p></description></item><item><title>关于我用C#写Opencv这件事-01</title><link>https://mlacookie.github.io/article/categories/opencv/%E5%85%B3%E4%BA%8E%E6%88%91%E7%94%A8c%23%E5%86%99opencv%E8%BF%99%E4%BB%B6%E4%BA%8B-01/</link><pubDate>Wed, 13 Mar 2024 21:51:11 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/opencv/%E5%85%B3%E4%BA%8E%E6%88%91%E7%94%A8c%23%E5%86%99opencv%E8%BF%99%E4%BB%B6%E4%BA%8B-01/</guid><description>&lt;h2 id="怎么突然要用opencv了">怎么突然要用Opencv了
&lt;/h2>&lt;p>我们有一门神秘课程，课设要写一个Opencv的应用
我是不知道我们臭做游戏的学这个有啥用&lt;/p>
&lt;p>总之我要整这么一个Opencv的应用
最后我打算做一个基于Opencv的AR应用
（这样还算跟我的专业有点联系）&lt;/p>
&lt;h2 id="大致的架构">大致的架构
&lt;/h2>&lt;p>语言的话当然是我心爱的C#
然后配合Godot来渲染&lt;/p>
&lt;p>这样的好处就是语言是我熟悉的，大致的运行模型是有的
然后拜.net不断进化所赐，跨平台也好做
Godot本身也是跨平台的，到时候也能移植到安卓上
（虽然跨平台算是个添头）&lt;/p>
&lt;h2 id="怎么用c写opencv">怎么用C#写Opencv
&lt;/h2>&lt;p>现在大致的架构有了，怎么用C#做Opencv开发呢
这就要用到些Nuget包了&lt;/p>
&lt;p>在.net中做这种开发，需要用到&lt;code>opencvsharp4&lt;/code>这个包
（或者说用EmguCV包，这个我没用过）&lt;/p>
&lt;p>需要注意的是，opencvsharp4这个包貌似不同版本的api不一样
（怎么跟之前的SharpPcap一样）
所以这里包括之后的代码不一定能在之后和之前的版本运行，就当个参考吧
我这用的版本是&lt;code>4.9.0&lt;/code>&lt;/p>
&lt;p>这个包本质上就是原本的Opencv在C++的库做了封装
自己用在工程上还是要自己做一些封装的
虽然确实还是能照C++代码写出C#的代码
但会非常痛苦，会遇到包括但不限于名称对不上、神秘类型的问题&lt;/p>
&lt;h2 id="如何捕获摄像头画面">如何捕获摄像头画面
&lt;/h2>&lt;p>作为系列的第一篇博客，也讲讲我写的第一段关于Opencv的代码吧
Opencv中包含了一些捕获摄像头的功能，
这样就不需要别的库来做这个了&lt;/p>
&lt;p>先贴出代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> OpenCvSharp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> OpenCVTest;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 视频捕获设备&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> VideoCapture camera = &lt;span style="color:#66d9ef">new&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 捕获的帧&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Mat frame = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置休眠时间&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> sleepTime = (&lt;span style="color:#66d9ef">int&lt;/span>)Math.Round(&lt;span style="color:#ae81ff">1000&lt;/span> / capture.Fps);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> camera.Read(frame);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(frame.Empty())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 显示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cv2.imshow(&lt;span style="color:#e6db74">&amp;#34;Test&amp;#34;&lt;/span> , frame);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cv2.WaitKey(sleepTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就完成了摄像头画面的捕获，其实还是挺简单的&lt;/p>
&lt;p>下面稍微解释下代码
&lt;code>VideoCapture&lt;/code>类是Opencv库自带的视频捕获类型
它的构造函数里可以输入两个参数，第一个是捕获的设备标号，表示用哪个摄像头
第二个是捕获用的API，默认参数是Any，基本上不用动&lt;/p>
&lt;p>&lt;code>Mat&lt;/code>在Opencv中代表矩阵，具体的数据是交给C++的库处理的
Opencv中的几乎所有操作都是对矩阵的操作
关于&lt;code>Mat&lt;/code>还有很多能说的，但这里说就要展开太多了，之后讲到再提&lt;/p>
&lt;p>下面的&lt;code>Cv2.imshow()&lt;/code>就是一个通用的显示方法，可以显示图片之类的
&lt;code>Cv2.WaitKey()&lt;/code>表示等待的时间&lt;/p></description></item><item><title>WPF开发过程中InitializeComponent()神秘报错</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%ADinitializecomponent-%E7%A5%9E%E7%A7%98%E6%8A%A5%E9%94%99/</link><pubDate>Thu, 07 Mar 2024 01:10:14 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%ADinitializecomponent-%E7%A5%9E%E7%A7%98%E6%8A%A5%E9%94%99/</guid><description>&lt;p>最近在写一个WPF项目，然后今天遇到个非常神秘的问题
就是界面的&lt;code>InitializeComponent()&lt;/code>莫名奇妙报错找不到方法了
我仔细检查代码，也没发现问题
而且最抽象的是，程序也能正常运行
我用ILSpy去看编译后的文件，发现&lt;code>InitializeComponent()&lt;/code>也是有的&lt;/p>
&lt;p>但报错看着总是不舒服啊，还是要解决
参考网上的说法，进入项目的文件夹
然后把&lt;code>obj&lt;/code>文件夹删掉，再在vs里面重新生成一下就好了
据说是因为分布类的问题，实际编译时生成的代码是正确的
但是&lt;code>IntelliCode&lt;/code>依赖的文件可能没更新上
然后就开始误报找不到&lt;code>InitializeComponent()&lt;/code>&lt;/p>
&lt;p>总之还是一个很神秘的问题&lt;/p></description></item><item><title>简单用下SharpPcap</title><link>https://mlacookie.github.io/article/posts/2023/%E7%AE%80%E5%8D%95%E7%94%A8%E4%B8%8Bsharppcap/</link><pubDate>Mon, 25 Dec 2023 10:01:56 +0000</pubDate><guid>https://mlacookie.github.io/article/posts/2023/%E7%AE%80%E5%8D%95%E7%94%A8%E4%B8%8Bsharppcap/</guid><description>&lt;h2 id="什么是sharppcap">什么是SharpPcap
&lt;/h2>&lt;p>最近嘛，要写各种课设，计网也要&lt;br>
课设就算了，里面还有一个网络编程&lt;br>
要求捕获些IP数据报，并输出些IP数据报里面的一些数据&lt;br>
然后一看要求，霍，好家伙，能用C#，那就简单了&lt;/p>
&lt;p>说回正题，要了解什么是&lt;code>SharpPcap&lt;/code>，就要先了解&lt;code>WinPcap&lt;/code>&lt;br>
&lt;code>WinPcap&lt;/code>是在windows下抓包的工具集合，相当于一个抓包的api&lt;br>
有了这个，我们就不需要直接与网卡打交道了，要抓包，直接调&lt;code>WinPcap&lt;/code>提供的api&lt;/p>
&lt;p>&lt;code>SharpPcap&lt;/code>就是把这些api打包成C#的形式，让我们可用在C#中方便的抓包&lt;/p>
&lt;h2 id="安装">安装
&lt;/h2>&lt;p>这个就很简单了，直接到Nuget包管理器里面安装就是了&lt;br>
&lt;img src="https://mlacookie.github.io/article/posts/2023/%E7%AE%80%E5%8D%95%E7%94%A8%E4%B8%8Bsharppcap/picture/1.png"
width="1425"
height="249"
srcset="https://mlacookie.github.io/article/posts/2023/%E7%AE%80%E5%8D%95%E7%94%A8%E4%B8%8Bsharppcap/picture/1_hu12092567368587587069.png 480w, https://mlacookie.github.io/article/posts/2023/%E7%AE%80%E5%8D%95%E7%94%A8%E4%B8%8Bsharppcap/picture/1_hu5665604019408907976.png 1024w"
loading="lazy"
alt="Nuget包管理器"
class="gallery-image"
data-flex-grow="572"
data-flex-basis="1373px"
>&lt;/p>
&lt;p>(@ 24-01-11)&lt;br>
其实应该用NPcap的，这个比较新，WinPcap有点老了&lt;br>
WinPcap调用不了无线网卡
这两个SharpPcap都可以调用&lt;br>
&lt;a class="link" href="https://npcap.com/#download" target="_blank" rel="noopener"
>NPcap下载&lt;/a>&lt;/p>
&lt;p>在写代码前，还要检查下又没有安装过&lt;code>WinPcap&lt;/code>，没有的话会找不到捕获的设备&lt;br>
&lt;a class="link" href="https://www.winpcap.org/install/default.htm" target="_blank" rel="noopener"
>WinPcap下载&lt;/a>&lt;br>
这个也是装上就完事了&lt;/p>
&lt;h2 id="写代码">写代码
&lt;/h2>&lt;p>需要注意的是，&lt;code>SharpPcap&lt;/code>貌似重构过好多次，我看到的使用范例有好几版&lt;br>
但都没用，最后还是靠我自己反编译看的&lt;br>
(GitHub那里的范例也是不能直接用的)&lt;br>
总之，我这里用的是&lt;code>6.2.5&lt;/code>的版本，别的版本我不管&lt;/p>
&lt;p>丢一段代码，里面带着详细的注释(这段代码也是我计网课设网络编程的代码)&lt;br>
(@ 24-01-11)&lt;br>
稍微修改下，原来的代码在处理标识符的逻辑点问题&lt;br>
(转成BitArray会出现高低位顺序的问题)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> SharpPcap;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> PacketDotNet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Collections;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> Test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CaptureDeviceList devices = CaptureDeviceList.Instance;&lt;span style="color:#75715e">//获取所有可用的设备&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (devices.Count &amp;lt; &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;No devices were found on this machine&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;span style="color:#75715e">//没有就直接退出了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;\nThe following devices are available on this machine:&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;----------------------------------------------------\n&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; devices.Count; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;index:{i}|{devices[i].Description}\n&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;span style="color:#75715e">//输出可用的设备及其编号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> num = Console.ReadLine();&lt;span style="color:#75715e">//获取用户输入的编号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICaptureDevice device = devices[&lt;span style="color:#66d9ef">int&lt;/span>.Parse(num)];&lt;span style="color:#75715e">//获取对应的设备对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device.Open(DeviceModes.Promiscuous, &lt;span style="color:#ae81ff">10000&lt;/span>);&lt;span style="color:#75715e">//准备启动设备&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> filter = &lt;span style="color:#e6db74">&amp;#34;ip&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device.Filter = filter;&lt;span style="color:#75715e">//设置过滤器为ip数据报&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device.OnPacketArrival += Device_OnPacketArrival;&lt;span style="color:#75715e">//设置收到包后的回调方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device.StartCapture();&lt;span style="color:#75715e">//开始捕捉&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.ReadLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device.StopCapture();&lt;span style="color:#75715e">//如果按下任意键，终止捕捉&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device.Close();&lt;span style="color:#75715e">//释放设备&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Device_OnPacketArrival(&lt;span style="color:#66d9ef">object&lt;/span> sender, PacketCapture e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> ip = e.GetPacket().GetPacket().Extract&amp;lt;IPPacket&amp;gt;();&lt;span style="color:#75715e">//把捕捉到的包转换成ip数据报&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//因为库里没有处理标识符和片偏移的逻辑，这里要自己写处理逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> s = &lt;span style="color:#66d9ef">new&lt;/span> BitArray(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>[] { ip.HeaderData[&lt;span style="color:#ae81ff">5&lt;/span>], ip.HeaderData[&lt;span style="color:#ae81ff">4&lt;/span>] });&lt;span style="color:#75715e">//获取第5第6字节的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> symbol = &lt;span style="color:#66d9ef">new&lt;/span> BitArray(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>[] { ip.HeaderData[&lt;span style="color:#ae81ff">7&lt;/span>], ip.HeaderData[&lt;span style="color:#ae81ff">6&lt;/span>] });&lt;span style="color:#75715e">//获取第7第8字节的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Version:\t{ip.Version}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Length:\t\t{ip.TotalLength}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Serial:\t\t{BitArrayToInt(s, 0, 15)}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;DF:\t\t{symbol[14]}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;MF:\t\t{symbol[13]}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Offest:\t\t{BitArrayToInt(symbol, 0, 12)}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;From:\t\t{ip.SourceAddress}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;To:\t\t{ip.DestinationAddress}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Protocol:\t{ip.Protocol}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; ip.HeaderData.Length; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (ip.HeaderData[i] &amp;lt; &lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;0{0:X} &amp;#34;&lt;/span>, ip.HeaderData[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;{0:X} &amp;#34;&lt;/span>, ip.HeaderData[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i % &lt;span style="color:#ae81ff">4&lt;/span> == &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> BitArrayToInt(BitArray bitArray, &lt;span style="color:#66d9ef">int&lt;/span> head, &lt;span style="color:#66d9ef">int&lt;/span> end)&lt;span style="color:#75715e">//只是个把二进制数组转换成数字的方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> a = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = head; i &amp;lt;= end; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (bitArray[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a += &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a *= &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上确实就这么一段代码就够了&lt;br>
里面的注释也已经点明了具体的功能&lt;/p>
&lt;p>需要注意的是，这里通过事件机制来处理收到包的情况&lt;br>
也就是这一句&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>device.OnPacketArrival += Device_OnPacketArrival;&lt;span style="color:#75715e">//设置收到包后的回调方法&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>device&lt;/code>收到数据报后，会触发&lt;code>OnPacketArrival&lt;/code>事件&lt;br>
然后就可用用事件那一套机制来处理收到的包了，也就是这一段代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Device_OnPacketArrival(&lt;span style="color:#66d9ef">object&lt;/span> sender, PacketCapture e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> ip = e.GetPacket().GetPacket().Extract&amp;lt;IPPacket&amp;gt;();&lt;span style="color:#75715e">//把捕捉到的包转换成ip数据报&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//因为库里没有处理标识符和片偏移的逻辑，这里要自己写处理逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> s = &lt;span style="color:#66d9ef">new&lt;/span> BitArray(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>[] { ip.HeaderData[&lt;span style="color:#ae81ff">5&lt;/span>], ip.HeaderData[&lt;span style="color:#ae81ff">4&lt;/span>] });&lt;span style="color:#75715e">//获取第5第6字节的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> symbol = &lt;span style="color:#66d9ef">new&lt;/span> BitArray(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>[] { ip.HeaderData[&lt;span style="color:#ae81ff">7&lt;/span>], ip.HeaderData[&lt;span style="color:#ae81ff">6&lt;/span>] });&lt;span style="color:#75715e">//获取第7第8字节的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Version:\t{ip.Version}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Length:\t\t{ip.TotalLength}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Serial:\t\t{BitArrayToInt(s, 0, 15)}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;DF:\t\t{symbol[14]}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;MF:\t\t{symbol[13]}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Offest:\t\t{BitArrayToInt(symbol, 0, 12)}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;From:\t\t{ip.SourceAddress}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;To:\t\t{ip.DestinationAddress}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Protocol:\t{ip.Protocol}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; ip.HeaderData.Length; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (ip.HeaderData[i] &amp;lt; &lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;0{0:X} &amp;#34;&lt;/span>, ip.HeaderData[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;{0:X} &amp;#34;&lt;/span>, ip.HeaderData[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i % &lt;span style="color:#ae81ff">4&lt;/span> == &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>e&lt;/code>就是捕获到的包，然后就可用进行一系列的处理了&lt;/p></description></item><item><title>WPF学习笔记06-关于ListView</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/</link><pubDate>Mon, 18 Sep 2023 20:10:22 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/</guid><description>&lt;h2 id="0x00-listview是什么">&amp;lt;0x00&amp;gt; ListView是什么
&lt;/h2>&lt;p>贴张图就好了&lt;br>
&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/1.png"
width="315"
height="87"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/1_hu10104860430969372561.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/1_hu11462016388892237703.png 1024w"
loading="lazy"
alt="微软给的图"
class="gallery-image"
data-flex-grow="362"
data-flex-basis="868px"
>&lt;br>
就是类似这种一行一行展示信息的控件&lt;br>
当然也不一定是像这种的类似表格的样子(这种后面会讲)&lt;br>
但都是一行一行的以行为单位的显示一些集合类的显示控件&lt;/p>
&lt;h2 id="0x01-先讲wpf里面自带的listview">&amp;lt;0x01&amp;gt; 先讲WPF里面自带的ListView
&lt;/h2>&lt;p>先给个代码，做一个最简单的演示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//ViewModel.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//常用引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ViewModel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> List&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; SomeItems { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;aaa&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bbb&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ccc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ddd&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>演示的结果&lt;br>
&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/2.png"
width="307"
height="130"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/2_hu4978152284371068872.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/2_hu150308122996815979.png 1024w"
loading="lazy"
alt="演示"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="566px"
>&lt;br>
这个就是最简单的ListView，也是WPF默认的样式&lt;br>
(从这期开始的图会多一点，以前的博文也会慢慢补图，感觉没图还是不好理解)&lt;/p>
&lt;p>我们可以先分析下这个控件需要什么，我们能得到什么&lt;br>
首先就肯定是需要一个集合啦&lt;br>
集合无所谓类型(应该都能用，看你怎么绑定)&lt;br>
然后我们能得到一个这样的显示&lt;br>
我们可以看到，在这个控件里面已经实现了页面滚动与子项的选择&lt;br>
(可以说除了有点不符合当代审美之外都没啥问题)&lt;/p>
&lt;h3 id="单项添加">单项添加
&lt;/h3>&lt;p>有时候可能也不是集合提供子项，可能本身就是写死的&lt;br>
这时候就要自己写&lt;code>ListViewItem&lt;/code>了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SelectionMode=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Single&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListViewItem&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;something1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListViewItem&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;something2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListViewItem&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;something3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListViewItem&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;something4&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListViewItem&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;something5&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/3.png"
width="288"
height="132"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/3_hu2991096702390541283.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/3_hu8350138577542016632.png 1024w"
loading="lazy"
alt="效果"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="523px"
>&lt;/p>
&lt;p>每个&lt;code>ListViewItem&lt;/code>也都能设置自己的&lt;code>Background&lt;/code>之类的属性，这里就不多写了&lt;/p>
&lt;h3 id="美化子项">美化子项
&lt;/h3>&lt;p>那我们还是要稍微美化一下的，虽然这样搞已经能用了&lt;br>
我们有两种方式&lt;br>
一个是操作&lt;code>ItemStyle&lt;/code>，另一个是操作&lt;code>ItemTemplate&lt;/code>&lt;/p>
&lt;h4 id="操作itemstyle">操作ItemStyle
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.ItemContainerStyle&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ListViewItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;FontSize&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Foreground&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Red&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Background&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BurlyWood&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--Trigger这里就偷懒了--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.ItemContainerStyle&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过&lt;code>ListView.ItemContainerStyle&lt;/code>里面设置&lt;code>ListViewItem&lt;/code>的样式&lt;br>
样式就按一般的方式走，这里就随便设置了下，&lt;code>Triggers&lt;/code>也能设置，这里懒得写了&lt;br>
&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/4.png"
width="406"
height="179"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/4_hu1982316204654177891.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/4_hu7406853540044865399.png 1024w"
loading="lazy"
alt="ItemViewStyle方法"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="544px"
>&lt;/p>
&lt;h4 id="操作itemtemplate">操作ItemTemplate
&lt;/h4>&lt;p>这里需要修改下ViewModel，为了更方便的绑定&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//ViewModel2.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//常用引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ViewModel2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> List&amp;lt;TypicalItem&amp;gt; SomeItems { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; } = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;TypicalItem&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> TypicalItem(&lt;span style="color:#e6db74">&amp;#34;aaa&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> SolidColorBrush(Color.FromRgb(&lt;span style="color:#ae81ff">82&lt;/span>,&lt;span style="color:#ae81ff">114&lt;/span>,&lt;span style="color:#ae81ff">248&lt;/span>))),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> TypicalItem(&lt;span style="color:#e6db74">&amp;#34;bbb&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> SolidColorBrush(Color.FromRgb(&lt;span style="color:#ae81ff">72&lt;/span>,&lt;span style="color:#ae81ff">137&lt;/span>,&lt;span style="color:#ae81ff">217&lt;/span>))),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> TypicalItem(&lt;span style="color:#e6db74">&amp;#34;ccc&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> SolidColorBrush(Color.FromRgb(&lt;span style="color:#ae81ff">91&lt;/span>,&lt;span style="color:#ae81ff">199&lt;/span>,&lt;span style="color:#ae81ff">240&lt;/span>))),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> TypicalItem(&lt;span style="color:#e6db74">&amp;#34;ddd&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> SolidColorBrush(Color.FromRgb(&lt;span style="color:#ae81ff">72&lt;/span>,&lt;span style="color:#ae81ff">214&lt;/span>,&lt;span style="color:#ae81ff">217&lt;/span>))),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> TypicalItem(&lt;span style="color:#e6db74">&amp;#34;eee&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> SolidColorBrush(Color.FromRgb(&lt;span style="color:#ae81ff">82&lt;/span>,&lt;span style="color:#ae81ff">248&lt;/span>,&lt;span style="color:#ae81ff">205&lt;/span>))),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TypicalItem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Name { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Brush Color { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> TypicalItem(&lt;span style="color:#66d9ef">string&lt;/span> name, Brush color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name = name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Color = color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel2/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTemplate&lt;/span> &lt;span style="color:#a6e22e">DataType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ListViewItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBox&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Name}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/5.png"
width="385"
height="193"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/5_hu9895216091486265741.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/5_hu4025268600109556046.png 1024w"
loading="lazy"
alt="ItemTemplate方法"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;br>
效果就差不多这样&lt;/p>
&lt;h4 id="区别">区别
&lt;/h4>&lt;p>实际上两个的侧重点是不一样的&lt;br>
&lt;code>ItemContainerStyle&lt;/code>重点在每个子项的样式设置&lt;br>
比方说就是每个子项的背景，子项按下的动画效果之类的&lt;br>
&lt;code>ItemTemplate&lt;/code>侧重在子项内部是怎么显示的&lt;br>
比方说写了个数据类型，里面有好几条属性&lt;br>
那么就可以用&lt;code>ItemTemplate&lt;/code>来自定义这些属性怎么显示&lt;/p>
&lt;p>我怀疑&lt;code>ListViewItem&lt;/code>里面就是包着自己的UI树的&lt;br>
但可视化树没显示，也不敢说死&lt;/p>
&lt;p>这两个的效果肯定是能合并在一起的，毕竟这俩侧重点是完全不一样的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel2/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--其实就加了这一个块--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.ItemContainerStyle&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ListViewItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Background&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BurlyWood&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.ItemContainerStyle&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTemplate&lt;/span> &lt;span style="color:#a6e22e">DataType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ListViewItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBox&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Name}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/6.png"
width="400"
height="191"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/6_hu16061936958746508311.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/6_hu17043903234950056753.png 1024w"
loading="lazy"
alt="合并"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;h3 id="和程序行为合并">和程序行为合并
&lt;/h3>&lt;p>那下一步就是写选中子项的行为了&lt;br>
我们可以通过设置&lt;code>SelectionChanged&lt;/code>事件&lt;br>
为了演示，先修改下前端代码，这里举选择子项切换Border背景颜色的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel2/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--加了个Grid，上下分割--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SelectionMode=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Single&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SelectionChanged=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ListView_SelectionChanged&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.ItemContainerStyle&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ListViewItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Background&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BurlyWood&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.ItemContainerStyle&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTemplate&lt;/span> &lt;span style="color:#a6e22e">DataType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ListViewItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBox&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Name}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--用来显示子项切换的效果的Border--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyBorder&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//MainWindow.xaml.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MainWindow&lt;/span> : Window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MainWindow()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ListView_SelectionChanged(&lt;span style="color:#66d9ef">object&lt;/span> sender, SelectionChangedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyBorder.Background = (e.AddedItems[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> TypicalItem).Color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/7.png"
width="400"
height="400"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/7_hu4676164823898837087.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E5%85%B3%E4%BA%8Elistview/picture/7_hu14564971074134562542.png 1024w"
loading="lazy"
alt="简单的演示"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;br>
这样就解决了&lt;br>
&lt;code>.xaml&lt;/code>的代码就不解释了，&lt;code>.cs&lt;/code>的代码还是能讲一下的&lt;br>
主要就是用&lt;code>e.AddedItems[0]&lt;/code>拿到选中的&lt;code>TypicalItem&lt;/code>对象&lt;br>
(&lt;code>e.AddedItems[0]&lt;/code>这个语法确实很怪，估计是主要是为了支持多个选中的情况)&lt;/p>
&lt;p>如果给&lt;code>ListView&lt;/code>起了名字的话也可以这么写(这里起名是&lt;code>MyListView&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//MainWindow.xaml.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MainWindow&lt;/span> : Window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MainWindow()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MyListView_SelectionChanged(&lt;span style="color:#66d9ef">object&lt;/span> sender, SelectionChangedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyBorder.Background = (MyListView.SelectedItem &lt;span style="color:#66d9ef">as&lt;/span> TypicalItem).Color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般来说这么访问选中的子项会多一点&lt;br>
因为有些时候会去想双击的代码，这就要用&lt;code>MouseDoubleClick&lt;/code>事件了&lt;br>
但&lt;code>MouseDoubleClick&lt;/code>是不带&lt;code>SelectionChangedEventArgs e&lt;/code>的&lt;br>
也就是说我们是不能靠&lt;code>传参变量e&lt;/code>来获取选择了哪个子项的&lt;br>
但靠&lt;code>MyListView.SelectedItem&lt;/code>这种方式就方便很多，都能用了&lt;/p>
&lt;p>顺便在这里提一点，如果要定义多个鼠标事件，不能采用传统的&lt;code>.xaml&lt;/code>写事件然后在&lt;code>.cs&lt;/code>写&lt;br>
因为这么写运行的时候这些&lt;code>MouseHandler&lt;/code>会相互屏蔽而导致有些就触发不了&lt;br>
比如按传统方式同时设置&lt;code>MouseDoubleClick&lt;/code>和&lt;code>MouseRightButtonDown&lt;/code>，只能触发前者&lt;br>
要都能触发，应该在控件的初始化用代码初始化这些&lt;code>Handler&lt;/code>&lt;br>
&lt;code>.xaml&lt;/code>里面可以按传统方法留一个，但别的都要靠代码方式添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//MainWindow.xaml.cs(随便举例的，与前面的代码无关)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MainWindow&lt;/span> : Window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MainWindow()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//就是在这里自己添加&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyListView.AddHandler(MouseDoubleClickEvent, &lt;span style="color:#66d9ef">new&lt;/span> MouseButtonEventHandler(&lt;span style="color:#66d9ef">this&lt;/span>.MyListView_MouseDoubleClick), &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyListView.AddHandler(MouseRightButtonDownEvent, &lt;span style="color:#66d9ef">new&lt;/span> MouseButtonEventHandler(&lt;span style="color:#66d9ef">this&lt;/span>.MyListView_MouseRightButtonDown), &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MyListView_MouseDoubleClick(&lt;span style="color:#66d9ef">object&lt;/span> sender, MouseButtonEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//处理代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MyListView_MouseRightButtonDown(&lt;span style="color:#66d9ef">object&lt;/span> sender, MouseButtonEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//处理代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有就是我还没啥办法实现类似&lt;code>Button&lt;/code>绑定&lt;code>ICommand&lt;/code>的做法&lt;br>
但其实可以把方法本体写在&lt;code>VM&lt;/code>里，然后在&lt;code>.cs&lt;/code>里用&lt;code>DataContext&lt;/code>调命令，实现猴版的&lt;code>MVVM&lt;/code>&lt;br>
这里就不细讲了&lt;/p>
&lt;h3 id="网格布局gridview">网格布局GridView
&lt;/h3>&lt;p>博客最上面的图就是使用了&lt;code>GridView&lt;/code>的效果&lt;br>
&lt;img src="https://mlacookie.github.io/Blog/%e7%bb%99%e4%be%a7%e8%be%b9%e6%a0%8f%e5%8a%a0%e4%b8%aaB%e7%ab%99%e5%9b%be%e6%a0%87/picture/1.jpg"
loading="lazy"
alt="这张图"
>&lt;br>
(就是这张)&lt;/p>
&lt;p>&lt;code>GridView&lt;/code>是嵌套在&lt;code>ListView&lt;/code>里面的，具体代码如下&lt;br>
(还是用得ViewModel2.cs)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel2/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&lt;/span> &lt;span style="color:#a6e22e">Header=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Name&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">DisplayMemberBinding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Name}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&lt;/span> &lt;span style="color:#a6e22e">Header=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Color&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn.CellTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTemplate&lt;/span> &lt;span style="color:#a6e22e">DataType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;local:TypicalItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridViewColumn.CellTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridViewColumn&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/8.png"
loading="lazy"
alt="emmm"
>&lt;br>
这样就实现了类似前面那张图的效果了&lt;/p>
&lt;p>这里不难看出&lt;code>GridView&lt;/code>是隶属于&lt;code>ListView&lt;/code>的&lt;br>
然后对于每一个格子，也是能自定义&lt;code>Template&lt;/code>的&lt;/p>
&lt;p>最上面的是&lt;code>Header&lt;/code>，也能自定义&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel2/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&lt;/span> &lt;span style="color:#a6e22e">Header=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Name&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">DisplayMemberBinding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Name}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--就改了这里--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumnHeader&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;emm&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BurlyWood&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridViewColumnHeader&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn.CellTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTemplate&lt;/span> &lt;span style="color:#a6e22e">DataType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;local:TypicalItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridViewColumn.CellTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridViewColumn&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单写一下就是这样了&lt;br>
前面讲的&lt;code>SelectionChanged&lt;/code>和&lt;code>MouseDoubleClick&lt;/code>之类的还是写在&lt;code>ListView&lt;/code>的块里&lt;br>
这样就可以实现表格化的效果了&lt;/p>
&lt;h2 id="0x02-讲讲modernwpf的listview">&amp;lt;0x02&amp;gt; 讲讲ModernWPF的ListView
&lt;/h2>&lt;p>因为有自己的练手项目在用这个包，所以就顺便讲讲了&lt;br>
(Nuget上有好多叫ModernWPF的包，我自己用的是&lt;a class="link" href="https://github.com/Kinnara/ModernWpf" target="_blank" rel="noopener"
>这个&lt;/a>)&lt;br>
之前的博客也有讲过一点&lt;/p>
&lt;p>在&lt;code>ModernWPF&lt;/code>的包里面有两种&lt;code>ListView&lt;/code>实现&lt;br>
一种是使用&lt;code>WPF&lt;/code>原生的&lt;code>ListView&lt;/code>但修改了&lt;code>Style&lt;/code>来匹配风格&lt;br>
另一种是包里面自己写的&lt;code>ListView&lt;/code>&lt;br>
前者就要求别去改&lt;code>Style&lt;/code>，不然所有的样式又要自己写&lt;br>
后者的化代码风格会更像&lt;code>UWP&lt;/code>开发，有些写法确实挺新的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:ui=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.modernwpf.com/2019&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ui:WindowHelper.UseModernWindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--这里用的是最前面的ViewModel--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ui:ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/9.png"
loading="lazy"
alt="效果"
>&lt;br>
这里演示了这个包里面的两种写法，效果上是一样的&lt;br>
其余大部分都可以按WPF原生的写法写&lt;br>
但如果要用GridView，那么只有原生的写法(这个包没自己写)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:ui=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.modernwpf.com/2019&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ui:WindowHelper.UseModernWindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel2/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&lt;/span> &lt;span style="color:#a6e22e">Header=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Name&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">DisplayMemberBinding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Name}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&lt;/span> &lt;span style="color:#a6e22e">Header=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Color&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">DisplayMemberBinding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/10.png"
loading="lazy"
alt="演示"
>&lt;br>
这里可以看得，如果用GridView的话，右边的滚动条时不会收纳的&lt;br>
(准确来说自动从收纳状态变成展开状态)&lt;/p>
&lt;p>别的自定义之类的也和WPF原生写法一样，就是尽量别动Style&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:ui=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.modernwpf.com/2019&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ui:WindowHelper.UseModernWindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:ViewModel2/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding SomeItems}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&lt;/span> &lt;span style="color:#a6e22e">Header=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Name&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">DisplayMemberBinding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Name}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn&lt;/span> &lt;span style="color:#a6e22e">Header=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Color&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GridViewColumn.CellTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTemplate&lt;/span> &lt;span style="color:#a6e22e">DataType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;local:TypicalItem&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Color}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridViewColumn.CellTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridViewColumn&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/GridView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://mlacookie.github.io/11.png"
loading="lazy"
alt="演示"
>&lt;/p>
&lt;p>写这篇博客真的花了不少时间，大家看得开心就好&lt;/p></description></item><item><title>WPF学习笔记05-怎么用ModernWPF实现带导航的界面</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-%E6%80%8E%E4%B9%88%E7%94%A8modernwpf%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%AF%BC%E8%88%AA%E7%9A%84%E7%95%8C%E9%9D%A2/</link><pubDate>Wed, 30 Aug 2023 13:28:48 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-%E6%80%8E%E4%B9%88%E7%94%A8modernwpf%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%AF%BC%E8%88%AA%E7%9A%84%E7%95%8C%E9%9D%A2/</guid><description>&lt;h2 id="0x00-介绍下modernwpf">&amp;lt;0x00&amp;gt; 介绍下ModernWPF
&lt;/h2>&lt;p>这个其实是个&lt;code>Nuget&lt;/code>包，里面有很多现代化设计的&lt;code>WPF&lt;/code>组件&lt;br>
不是之前说嘛，在&lt;code>WPF&lt;/code>里面做现代化的&lt;code>UI&lt;/code>设计很复杂&lt;br>
现在差不多就是别人已经把最复杂的实现写完了，我们只要调用就好了&lt;/p>
&lt;p>这个包的实现风格是&lt;code>UWP&lt;/code>风格(也就是&lt;code>WinUI2&lt;/code>)&lt;br>
里面的很多用法是参考&lt;code>UWP&lt;/code>的(我具体用下来就是&lt;code>UWP&lt;/code>的api级复刻)&lt;br>
所以有些组件的用法跟&lt;code>WPF&lt;/code>的常见实现不一样(就比如这里讲的导航界面)&lt;/p>
&lt;p>安装的话用&lt;code>VS&lt;/code>的&lt;code>Nuget包管理器&lt;/code>就可以&lt;br>
&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-%E6%80%8E%E4%B9%88%E7%94%A8modernwpf%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%AF%BC%E8%88%AA%E7%9A%84%E7%95%8C%E9%9D%A2/picture/1.png"
width="1630"
height="796"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-%E6%80%8E%E4%B9%88%E7%94%A8modernwpf%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%AF%BC%E8%88%AA%E7%9A%84%E7%95%8C%E9%9D%A2/picture/1_hu15586002075543139015.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-%E6%80%8E%E4%B9%88%E7%94%A8modernwpf%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%AF%BC%E8%88%AA%E7%9A%84%E7%95%8C%E9%9D%A2/picture/1_hu670083321652710202.png 1024w"
loading="lazy"
alt="认准Nuget包"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;br>
(&lt;code>Nuget&lt;/code>上有很多包叫ModernWPF，我用的是这个，别的实现我就不清楚了，最好一样吧)&lt;br>
&lt;a class="link" href="https://github.com/Kinnara/ModernWpf" target="_blank" rel="noopener"
>Github项目主页&lt;/a>&lt;br>
在Github上也有这个项目的&lt;code>Wiki&lt;/code>，所有组件的使用都有列举一点&lt;br>
因为差不多是完全复刻&lt;code>UWP&lt;/code>的，所以有些样例会直接跳转到微软的文档&lt;br>
照样看就是了，代码实现是差不多的(跳转的文档是英文的，最好就直接看英文，这样最准确)&lt;/p>
&lt;h2 id="0x01-如果是一般的wpf项目我们该怎么实现导航">&amp;lt;0x01&amp;gt; 如果是一般的WPF项目，我们该怎么实现导航
&lt;/h2>&lt;p>还是先稍微讲讲一般的&lt;code>WPF&lt;/code>项目里怎么实现导航&lt;br>
假设我们有&lt;code>MainWindow.xaml&lt;/code>，&lt;code>PageViewModel.cs&lt;/code>，&lt;code>SomePage.xaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;window.DataContent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;local:PageViewModel/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--第一列放导航的按钮--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;StackPanel&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--若干按钮，具体就不设计了--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Command=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding NavigateToPage}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/StackPanel&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--内容展示的页面--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;UserControl&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding CurrentPage}&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//PageViewModel.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//常见的引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> TestProject.ViewModel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PageViewModel&lt;/span>:ObservableObject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [ObservableProperty]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">object?&lt;/span> currentPage;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICommand NavigateToPage{&lt;span style="color:#66d9ef">get&lt;/span>;&lt;span style="color:#66d9ef">set&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> PageViewModel()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CurrentPage=&lt;span style="color:#66d9ef">new&lt;/span> SomePage();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NavigateToPage=&lt;span style="color:#66d9ef">new&lt;/span> RelayCommand(()=&amp;gt;CurrentPage=&lt;span style="color:#66d9ef">new&lt;/span> SomePage());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(这里的一些没见过的东西是在&lt;code>Community.MVVM&lt;/code>包里面的，上一篇结尾有介绍)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--SomePage.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;UserControl&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Emmm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Foreground=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;White&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;32&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/UserControl&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里通过&lt;code>UseControl&lt;/code>控件来存放我们自己写的&lt;code>SomePage&lt;/code>&lt;br>
导航栏的每个按钮会绑定一个&lt;code>Command&lt;/code>，来控制&lt;code>UserControl&lt;/code>的&lt;code>Content&lt;/code>&lt;br>
因为这个&lt;code>Content&lt;/code>就存放具体的页面嘛，所以只要改这个&lt;code>Content&lt;/code>就相当于切换页面了&lt;br>
之后有什么多的页面就是先新建一个&lt;code>UserControl&lt;/code>控件并完成设计&lt;br>
然后再在&lt;code>PageViewModel.cs&lt;/code>里面实现切换代码(就是写一行改&lt;code>CurrentPage&lt;/code>的代码)&lt;br>
最后在&lt;code>MainWindow.xaml&lt;/code>里面为对应按钮绑定&lt;code>Command&lt;/code>就好&lt;br>
其实最好是在&lt;code>PageViewModel&lt;/code>里用一个&lt;code>object&lt;/code>数组存储不同的page，我这里就偷懒了&lt;br>
还有就是导航栏我也没咋设计，基本上就是用&lt;code>Triger&lt;/code>配合&lt;code>Setter&lt;/code>做就可以了，这里也摸了&lt;/p>
&lt;h2 id="0x02-用modernwpf里面的navigationview实现导航">&amp;lt;0x02&amp;gt; 用ModernWPF里面的NavigationView实现导航
&lt;/h2>&lt;p>(虽然是介绍怎么在&lt;code>ModernWPF&lt;/code>里面实现导航，因为用法极像&lt;code>UWP&lt;/code>，也算介绍&lt;code>UWP&lt;/code>的开发了)&lt;br>
在&lt;code>ModernWPF&lt;/code>中用&lt;code>NavigationView&lt;/code>做导航就没有类似按钮绑定&lt;code>Command&lt;/code>的用法了&lt;br>
准确来说，用&lt;code>ModernWPF&lt;/code>甚至都不需要写一个对应的&lt;code>VM&lt;/code>&lt;br>
那么怎么切换页面呢&lt;br>
差不多就是靠&lt;code>.xaml&lt;/code>附带的&lt;code>.cs&lt;/code>里面实现了&lt;br>
先上代码&lt;br>
(ModernWPF有使用前的一些步骤，在它的&lt;code>readme&lt;/code>有写，就两步，我就不介绍了)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--ModernUITest.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#a6e22e">x:Class=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TestProject.ModernUITest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:d=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:mc=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:ui=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.modernwpf.com/2019&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:local=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:TestProject&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mc:Ignorable=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ui:WindowHelper.UseModernWindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Title=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ModernUITest&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;800&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;800&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ui:NavigationView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IsBackButtonVisible=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Collapsed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IsTitleBarAutoPaddingEnabled=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;False&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PaneTitle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PaneDisplayMode=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Auto&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ItemInvoked=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;NavigationView_ItemInvoked&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ui:NavigationView.MenuItems&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ui:NavigationViewItem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Icon=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Tag=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TestProject.Page.PageTest1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Sample Item 1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IsSelected=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ui:NavigationViewItem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Icon=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Keyboard&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Sample Item 2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Tag=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TestProject.Page.PageTest2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ui:NavigationView.MenuItems&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;UserControl&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UC&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ui:NavigationView&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//ModernUITest.xaml.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//常见的引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> TestProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ModernUITest&lt;/span> : Window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ModernUITest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UC.Content = &lt;span style="color:#66d9ef">new&lt;/span> PageTest1();&lt;span style="color:#75715e">//给一个默认的页面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> NavigationView_ItemInvoked(ModernWpf.Controls.NavigationView sender, ModernWpf.Controls.NavigationViewItemInvokedEventArgs args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(args.IsSettingsInvoked==&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NavigationView_Navigate(&lt;span style="color:#66d9ef">typeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>), args.RecommendedNavigationTransitionInfo);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//我这里没写Setting的page，所以就随便写了typeof(int)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(args.InvokedItemContainer!=&lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NavigationView_Navigate(Type.GetType(args.InvokedItemContainer.Tag.ToString()), args.RecommendedNavigationTransitionInfo);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> NavigationView_Navigate(Type navPageType, NavigationTransitionInfo transitionInfo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Type preNavPageType = UC.Content.GetType();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(navPageType &lt;span style="color:#66d9ef">is&lt;/span> not &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; !Type.Equals(navPageType, preNavPageType))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(navPageType==&lt;span style="color:#66d9ef">typeof&lt;/span>(PageTest1))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UC.Content = &lt;span style="color:#66d9ef">new&lt;/span> PageTest1();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (navPageType == &lt;span style="color:#66d9ef">typeof&lt;/span>(PageTest2))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UC.Content = &lt;span style="color:#66d9ef">new&lt;/span> PageTest2();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(PageTest1和PageTest2的代码就不贴了，就纯纯的一行字)&lt;/p>
&lt;h3 id="先讲下包里的东西">先讲下包里的东西
&lt;/h3>&lt;p>&lt;code>ui:WindowHelper.UseModernWindowStyle=true&lt;/code>表示使用ModernWPF的窗口样式&lt;br>
&lt;code>window&lt;/code>控件下面只有&lt;code>ui:NavigationView&lt;/code>&lt;br>
先在&lt;code>ui:NavigationView&lt;/code>里面设置&lt;code>ui:NavigationView.MenuItems&lt;/code>&lt;br>
再在里面设置&lt;code>ui:NavigationViewItem&lt;/code>，要几个就设置几个&lt;br>
&lt;code>ui:NavigationView&lt;/code>下面有个&lt;code>UserControl&lt;/code>，这个就是我们要切换的页面&lt;/p>
&lt;p>&lt;code>ui:NavigationView&lt;/code>里面有些属性&lt;br>
&lt;code>IsBackButtonVisible=&amp;quot;Collapsed&amp;quot;&lt;/code>是关闭默认的返回按钮&lt;br>
&lt;code>IsTitleBarAutoPaddingEnabled=&amp;quot;False&amp;quot;&lt;/code>是关闭顶栏的自动排布&lt;br>
&lt;code>PaneTitle=&amp;quot;Test&amp;quot;&lt;/code>就是会显示在最上面的那行字，展开时会显示&lt;br>
&lt;code>PaneDisplayMode=&amp;quot;Auto&amp;quot;&lt;/code>这里显示了自动展开，就是最大化窗口时会自动展开&lt;br>
&lt;code>ItemInvoked=&amp;quot;NavigationView_ItemInvoked&amp;quot;&lt;/code>这个是实现导航最关键的部分，后面讲&lt;/p>
&lt;p>&lt;code>ui:NavigationViewItem&lt;/code>里别的应该都能看懂&lt;br>
就是&lt;code>Tag&lt;/code>这个是最关键的，规范的话里面要填上要导航页面对应的类型全名&lt;br>
就是对应页面的&lt;code>namespace.类名&lt;/code>，因为按规范导航会用到&lt;code>Type&lt;/code>来判断&lt;br>
(估计是因为微软文档写的是用&lt;code>Frame&lt;/code>实现页面导航)&lt;/p>
&lt;h3 id="xaml里要干的事">.xaml里要干的事
&lt;/h3>&lt;p>在&lt;code>ui:NavigationView&lt;/code>里写上&lt;code>ItemInvoked=&amp;quot;NavigationView_ItemInvoked&amp;quot;&lt;/code>，名字随意&lt;br>
在&lt;code>ui:NavigationViewItem&lt;/code>里正确写上&lt;code>Tag&lt;/code>&lt;br>
给&lt;code>UserControl&lt;/code>起个名，好让我们在&lt;code>.cs&lt;/code>拿到对象&lt;br>
剩下的事就交给&lt;code>.cs&lt;/code>了&lt;/p>
&lt;h3 id="cs里要干的事">.cs里要干的事
&lt;/h3>&lt;p>按上面的样式写就可以了&lt;/p>
&lt;h3 id="大致的调用过程">大致的调用过程
&lt;/h3>&lt;p>在&lt;code>NavigationView&lt;/code>里面切换页面会触发&lt;code>ItemInvoked&lt;/code>绑定的事件&lt;br>
在&lt;code>ItemInvoked&lt;/code>绑定的方法中，先判定是不是要切换到&lt;code>Setting&lt;/code>的页面&lt;br>
&lt;code>(args.IsSettingsInvoked==true)&lt;/code>
(因为这里的&lt;code>NavigationView&lt;/code>没有设置&lt;code>IsSettingsVisible=&amp;quot;False&amp;quot;&lt;/code>)&lt;br>
然后判定&lt;code>args.InvokedItemContainer!=null&lt;/code>&lt;br>
这两条路径都会调用导航方法&lt;code>NavigationView_Navigate&lt;/code>&lt;br>
这个导航方法会要求传入一个&lt;code>Type&lt;/code>和一个&lt;code>NavigationTransitionInfo&lt;/code>&lt;br>
(&lt;code>NavigationTransitionInfo&lt;/code>在这里确实没啥用)&lt;br>
这个&lt;code>Type&lt;/code>用来判断具体要切换到哪个页面&lt;/p>
&lt;p>其实&lt;code>Tag&lt;/code>随便写也没啥问题，主要看写的导航方法是什么&lt;br>
这里我写的代码极致精简的话完全可以初始化一个&lt;code>Dictionary&amp;lt;string,object&amp;gt;&lt;/code>&lt;br>
然后直接在&lt;code>ItemInvoked&lt;/code>绑定的方法中切换就可以了&lt;br>
像这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> TestProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ModernUITest&lt;/span> : Window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">object&lt;/span>&amp;gt; pages;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ModernUITest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pages = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">object&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Page1&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">new&lt;/span> PageTest1()},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Page2&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">new&lt;/span> PageTest2()},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">&amp;#34;Setting&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">new&lt;/span> SettingPage()},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UC.Content = pages[&lt;span style="color:#e6db74">&amp;#34;Page1&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> NavigationView_ItemInvoked(ModernWpf.Controls.NavigationView sender, ModernWpf.Controls.NavigationViewItemInvokedEventArgs args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (args.IsSettingsInvoked == &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UC.Content = pages[&lt;span style="color:#e6db74">&amp;#34;Setting&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (args.InvokedItemContainer != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UC.Content = pages[args.InvokedItemContainer.Tag.ToString()];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的&lt;code>Tag&lt;/code>再改改就好&lt;/p>
&lt;h2 id="0x03-两种做法的区别">&amp;lt;0x03&amp;gt; 两种做法的区别
&lt;/h2>&lt;p>我个人来看的话，按第一种实现会更加优雅&lt;br>
毕竟前端只要有按钮绑定&lt;code>Command&lt;/code>就好了&lt;br>
但这么做的话就是控件要自己开发了(也确实不是大问题，主要是WPF现在只有维护了)&lt;/p>
&lt;p>第二种方式相对来说没那么优雅，但真正做到了前端的事前端干&lt;br>
按照&lt;code>MVVM&lt;/code>的理论，&lt;code>VM&lt;/code>是用来连接前后端的&lt;br>
但第一种方法我们仅仅是为了前端切换页面就写了个&lt;code>PageViewModel&lt;/code>实现&lt;br>
某种程度上确实不大符合&lt;code>MVVM&lt;/code>的定义&lt;br>
(我知道有别的方式可以不单独写VM，但别的方式确实没单独写VM直观)&lt;br>
而第二种方法把前端的事情聚合在一起，那些新的页面都是在前端new出来的&lt;br>
有啥好处呢，主要还是方便管理吧，功能更加聚合了&lt;/p></description></item><item><title>WPF学习笔记04-MVVM和别的一些东西的补充</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-mvvm%E5%92%8C%E5%88%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF%E7%9A%84%E8%A1%A5%E5%85%85/</link><pubDate>Wed, 23 Aug 2023 00:49:54 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-mvvm%E5%92%8C%E5%88%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF%E7%9A%84%E8%A1%A5%E5%85%85/</guid><description>&lt;h2 id="0x00-相对更正规的mvvm的写法">&amp;lt;0x00&amp;gt; 相对更正规的MVVM的写法
&lt;/h2>&lt;p>前一篇文章不是讲MVVM模型嘛，然后这几天看了看别人写的代码&lt;br>
确实有很多值得学习的地方&lt;/p>
&lt;h3 id="单独拆个baseviewmodel出来">单独拆个BaseViewModel出来
&lt;/h3>&lt;p>之前讲到&lt;code>ViewModel&lt;/code>要实现接口&lt;code>INotifyPropertyChanged&lt;/code>来通知前端属性更改&lt;br>
基本上所有的&lt;code>VM&lt;/code>都要用到的，所以最好就是有个&lt;code>BaseViewModel&lt;/code>类，给所有的&lt;code>VM&lt;/code>继承&lt;br>
具体代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest.VM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BaseViewModel&lt;/span> : INotifyPropertyChanged
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">event&lt;/span> PropertyChangedEventHandler PropertyChanged;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> NotifyPropertyChanged(&lt;span style="color:#66d9ef">string&lt;/span> propertyName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PropertyChangedEventHandler handler = PropertyChanged;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler != &lt;span style="color:#66d9ef">null&lt;/span>) handler(&lt;span style="color:#66d9ef">this&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> PropertyChangedEventArgs(propertyName));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实就是把那些代码单独拆出来了&lt;br>
然后所有的&lt;code>VM&lt;/code>继承这个类就好了&lt;/p>
&lt;p>之前也讲到&lt;code>RelayCommand&lt;/code>类也是经常用到的工具类&lt;br>
所以一般这两个类的文件会放在同一个文件夹下&lt;/p>
&lt;p>这里的命名空间也进行了规范(我这里为了简单就只写缩写了)&lt;br>
反正就是&lt;code>M/V/VM&lt;/code>分三块地就行了&lt;br>
具体还是按着规范怎么舒服怎么来&lt;/p>
&lt;h3 id="另一种更舒适的方式添加datacontext">另一种更舒适的方式添加DataContext
&lt;/h3>&lt;p>之前在前端引入&lt;code>VM&lt;/code>的上下文是靠对应&lt;code>.cs&lt;/code>文件里加&lt;code>this.DataContext=this;&lt;/code>实现&lt;br>
现在有相对舒适的做法&lt;br>
首先要在&lt;code>.xaml&lt;/code>的&lt;code>xmlns&lt;/code>中引入命名空间&lt;br>
然后加入具体控件的&lt;code>DataContext&lt;/code>&lt;br>
具体要添加的代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:vm=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:WPFTest.VM&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;vm:ViewModel/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.DataContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>vm&lt;/code>可以随便改的，&lt;code>ViewModel&lt;/code>是具体的&lt;code>VM&lt;/code>&lt;br>
这样写的话就尽可能避开对应的&lt;code>.cs&lt;/code>，尽可能把前端实现交给&lt;code>.xaml&lt;/code>&lt;/p>
&lt;h2 id="0x01-关于窗口透明化">&amp;lt;0x01&amp;gt; 关于窗口透明化
&lt;/h2>&lt;p>之前是在Window标签里设置&lt;code>AllowTransparency=True&lt;/code>和&lt;code>Background=&amp;quot;Transparent&amp;quot;&lt;/code>来实现&lt;br>
但这样实现的窗口性能会受很大影响(相关分析可以看&lt;a class="link" href="https://lindexi.gitee.io/post/WPF-%E4%BB%8E%E6%9C%80%E5%BA%95%E5%B1%82%E6%BA%90%E4%BB%A3%E7%A0%81%E4%BA%86%E8%A7%A3-AllowsTransparency-%E6%80%A7%E8%83%BD%E5%B7%AE%E7%9A%84%E5%8E%9F%E5%9B%A0.html" target="_blank" rel="noopener"
>大佬lindexi的博客&lt;/a>)&lt;br>
简单来说就是这样写会相对频繁的申请内存，让CPU和内存的负荷加大&lt;br>
所以怎么办呢，我们也可以通过&lt;code>WindowChrome&lt;/code>实现&lt;br>
更多的信息可以看&lt;a class="link" href="https://blog.walterlv.com/post/wpf-transparent-window-without-allows-transparency.html" target="_blank" rel="noopener"
>大佬walterlv的博客&lt;/a>&lt;br>
还有&lt;a class="link" href="https://www.cnblogs.com/choumengqizhigou/p/15739993.html" target="_blank" rel="noopener"
>大佬丑萌气质狗的博客&lt;/a>&lt;br>
我这里就接着我的代码改改了&lt;/p>
&lt;p>具体修改的代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--前一个是隐藏window默认控件的，后一个是仅允许最小化的意思--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--具体也不清楚为啥，后一个必须是CanMinimize或NoResize才有透明--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;None&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ResizeMode=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CanMinimize&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--修改WindowChrome--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;WindowChrome.WindowChrome&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;WindowChrome&lt;/span> &lt;span style="color:#a6e22e">GlassFrameThickness=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/WindowChrome.WindowChrome&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--别的代码--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--在Template里设置背景透明，一定别忘加ContentPresenter--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Window&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Transparent&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">CornerRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;LinearGradientBrush&lt;/span> &lt;span style="color:#a6e22e">StartPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">EndPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#392669&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#46204F&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DropShadowEffect&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Gray&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ShadowDepth=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BlurRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Opacity=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Direction=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ContentPresenter&lt;/span> &lt;span style="color:#a6e22e">ClipToBounds=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--别的控件--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有我们原来负责最小化和关闭程序的两个按钮要加上&lt;code>WindowChrome.IsHitTestVisibleInChrome=&amp;quot;True&amp;quot;&lt;/code>&lt;br>
这个原理在丑萌气质狗的博客里有讲&lt;/p>
&lt;p>(其实建议不搞异型窗口，容易出很多莫名其妙的问题)&lt;/p>
&lt;h2 id="0x02-一些常用的nuget包">&amp;lt;0x02&amp;gt; 一些常用的Nuget包
&lt;/h2>&lt;p>&lt;code>WPF&lt;/code>的强大还体现在有很多&lt;code>Nuget&lt;/code>包&lt;br>
这些包大多是些&lt;code>UI&lt;/code>组件，使&lt;code>WPF&lt;/code>也可以方便的实现现代化的&lt;code>UI&lt;/code>&lt;br>
我自己在研究的有&lt;a class="link" href="https://github.com/Kinnara/ModernWpf" target="_blank" rel="noopener"
>ModernWPF&lt;/a>和&lt;a class="link" href="https://github.com/sourcechord/FluentWPF" target="_blank" rel="noopener"
>FluentWPF&lt;/a>&lt;br>
&lt;code>MordernWPF&lt;/code>提供了些现代化的窗口和组件&lt;br>
&lt;code>FluentWPF&lt;/code>实现了&lt;code>Fluent&lt;/code>设计的&lt;code>UI&lt;/code>，看着好看很多&lt;br>
这两个用得应该还算广吧(我在很多的WPF项目里看到有用的)&lt;br>
性能方面还没怎么试(没研究明白)&lt;/p>
&lt;p>还有一个不是专门给&lt;code>WPF&lt;/code>用的，而是方便&lt;code>MVVM&lt;/code>设计的&lt;br>
叫&lt;code>CommunityToolkit.Mvvm&lt;/code>，很好用的&lt;br>
平时我们写&lt;code>MVVM&lt;/code>模式总是要像最上面一样写一个&lt;code>BaseViewModel&lt;/code>还有一个&lt;code>RelayCommand&lt;/code>&lt;br>
这些常用的基础类已经在这个包里写好了&lt;br>
尤其是这玩意&lt;code>8.0&lt;/code>版本加入了源代码生成器的特性，现在写属性和前端通知就很方便&lt;br>
具体可以看&lt;a class="link" href="https://www.bilibili.com/video/BV12x4y177qB" target="_blank" rel="noopener"
>B站up-十月的寒流的视频&lt;/a>&lt;br>
(人家是真大佬，他的视频做的都很不错的)&lt;br>
(所以我的博客就摸了😋)&lt;/p></description></item><item><title>浅谈C#转IL语言</title><link>https://mlacookie.github.io/article/posts/2023/%E6%B5%85%E8%B0%88csharp%E8%BD%ACil%E8%AF%AD%E8%A8%80/</link><pubDate>Thu, 03 Aug 2023 02:44:36 +0000</pubDate><guid>https://mlacookie.github.io/article/posts/2023/%E6%B5%85%E8%B0%88csharp%E8%BD%ACil%E8%AF%AD%E8%A8%80/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>突发奇想，想研究下IL语言&lt;br>
本来以为会挺难的，结果发现貌似还行&lt;br>
注意：本博客不打算详细讲解IL的原理之类的&lt;br>
只是大概讲讲我研究的成果&lt;br>
这里推荐两篇博客，他们那讲的更详细&lt;br>
一个是来自Zery的&lt;a class="link" href="https://www.cnblogs.com/zery/p/3368460.html" target="_blank" rel="noopener"
>IL指令详细&lt;/a>&lt;br>
另一个是布鲁克石的&lt;a class="link" href="https://www.cnblogs.com/brookshi/p/5225801.html" target="_blank" rel="noopener"
>30分钟？不需要，轻松读懂IL&lt;/a>&lt;/p>
&lt;h2 id="0x01-什么是il语言">&amp;lt;0x01&amp;gt; 什么是IL语言
&lt;/h2>&lt;p>这就要从&lt;code>.net&lt;/code>的运行结构开始讲起&lt;br>
&lt;code>.net&lt;/code>框架下面有好多们语言，但&lt;code>.net&lt;/code>的运行时就一个&lt;br>
所以这个运行时怎么能同时跑这么多的语言，是每个语言一个实现吗？&lt;br>
肯定不是，这太麻烦了&lt;br>
所以&lt;code>.net&lt;/code>编译器会将它托管的语言先编译成一个中间语言，这个中间语言就是IL&lt;br>
&lt;code>.net&lt;/code>运行时会动态解释这个IL文件(这个跟Java差不多的流程)&lt;/p>
&lt;p>通过IL语言，&lt;code>.net&lt;/code>实现了多语言共用一个运行时，也让不同语言能非常方便地整合进一个项目&lt;br>
(反正编译出来的东西都是一样的)&lt;br>
这个具体的过程可以看本叫&lt;code>《CLR via C#》&lt;/code>(俗称C#圣经😂，最近在看)&lt;br>
里面讲到过&lt;/p>
&lt;h2 id="0x02-怎么查看il语言">&amp;lt;0x02&amp;gt; 怎么查看IL语言
&lt;/h2>&lt;p>第一种方法，&lt;code>ILDasm&lt;/code>&lt;br>
&lt;code>Visual Studio&lt;/code>自带的反汇编软件(但我没找到)&lt;br>
参考&lt;a class="link" href="https://learn.microsoft.com/zh-cn/dotnet/framework/tools/ildasm-exe-il-disassembler" target="_blank" rel="noopener"
>微软的文档&lt;/a>就好&lt;/p>
&lt;p>第二种方法，&lt;a class="link" href="https://sharplab.io/" target="_blank" rel="noopener"
>sharplab.io&lt;/a>&lt;br>
这是个给&lt;code>C#&lt;/code>用的实时转换成&lt;code>IL&lt;/code>的网页工具&lt;br>
这个还可以转换成编译器优化后的代码甚至是给&lt;code>CLR&lt;/code>执行的汇编代码&lt;br>
在线执行也是可以的，而且它可以列出所写代码的所有语法点并列出微软的说明文档链接&lt;br>
不过毕竟是网页工具，并不完全支持所有的&lt;code>FCL&lt;/code>库，所以可能有些库用不了&lt;br>
总之这是个非常方便的工具，有什么小测试都可以在上面测试&lt;/p>
&lt;p>第三种方法，&lt;a class="link" href="https://github.com/icsharpcode/ILSpy/tree/master" target="_blank" rel="noopener"
>ILSpy&lt;/a>&lt;br>
这个工具也挺好用的，有支持&lt;code>Visual Studio&lt;/code>的插件&lt;br>
装上就可以写代码的时候直接反编译&lt;/p>
&lt;p>(@ 23-08-22)&lt;br>
只是看核心库源代码的话还有一种办法，&lt;a class="link" href="https://source.dot.net/" target="_blank" rel="noopener"
>官方的源代码网站&lt;/a>&lt;br>
具体我没怎么用过，就先补充在这里吧&lt;/p>
&lt;p>我现在在用第二种和第三种方法&lt;br>
平时做小测试网页工具用用就好了&lt;br>
但在研究&lt;code>.net&lt;/code>的底层api的时候就需要用&lt;code>ILSpy&lt;/code>了&lt;br>
(虽然&lt;code>.net core&lt;/code>开源了，但自己找效率确实低，反编译哪里不会点哪里)&lt;/p>
&lt;h2 id="0x03-c的编译过程">&amp;lt;0x03&amp;gt; C#的编译过程
&lt;/h2>&lt;p>C#编译到IL分两步&lt;br>
第一步：编译器优化代码&lt;br>
第二步：编译成IL&lt;/p>
&lt;p>在第一步中，编译器将对原代码进行彻头彻尾的改造&lt;br>
比方说代码有一句&lt;code>int a = 5;&lt;/code>，在优化过程中会改名为&lt;code>int num = 5;&lt;/code>&lt;br>
还有就是将一些编译期就知道结果的值计算出来，比如&lt;code>&amp;quot;a&amp;quot;+&amp;quot;b&amp;quot;&lt;/code>就会直接优化成&lt;code>&amp;quot;ab&amp;quot;&lt;/code>
在这个过程中，编译器还会加上非常多的，用于跟&lt;code>CLR&lt;/code>通信的指令&lt;br>
这些指令主要是指导&lt;code>CLR&lt;/code>正确执行代码，具体我也不是很熟，以后再说&lt;/p>
&lt;p>第二步编译成IL就看靠编译器了&lt;/p>
&lt;p>这两步具体实现可以看&lt;code>Roslyn&lt;/code>的源码，在&lt;code>GitHub&lt;/code>上&lt;br>
(我还没开始研究这玩意)&lt;/p>
&lt;p>另外还有就是C#编译有两种模式&lt;br>
&lt;code>Debug&lt;/code>和&lt;code>Release&lt;/code>&lt;br>
前者编译出的代码并不是最优化的，里面会有很多的&lt;code>nop&lt;/code>指令&lt;br>
(就是执行这条指令啥也不干，方便调试打断点用的)&lt;br>
后者是用来发布的，编译出来的代码是经过编译器完全优化的&lt;/p>
&lt;h2 id="0x04-开始研究il">&amp;lt;0x04&amp;gt; 开始研究IL
&lt;/h2>&lt;p>首先先是一段简单的代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> M() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> a=&lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> str=&lt;span style="color:#e6db74">&amp;#34;abc&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(a+str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看看它编译后的IL语言(Debug下编译)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>.assembly _
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">08&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">54&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#ae81ff">57&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">70&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>e &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#ae81ff">78&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">63&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">70&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">54&lt;/span> &lt;span style="color:#ae81ff">68&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">77&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [System.Runtime]System.Diagnostics.DebuggableAttribute/DebuggingModes) = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">07&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .permissionset reqmin = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span>e &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>a &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">6d&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>e &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">63&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>e &lt;span style="color:#ae81ff">50&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">6d&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">63&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">6d&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">41&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">62&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>c &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">6d&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>e &lt;span style="color:#ae81ff">52&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">6d&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>c &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">56&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">73&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">3d&lt;/span> &lt;span style="color:#ae81ff">37&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>e &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>e &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>e &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>c &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">43&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6&lt;/span>c &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">3d&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>c &lt;span style="color:#ae81ff">2&lt;/span>c &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">62&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>c &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">63&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>b &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span> &lt;span style="color:#ae81ff">54&lt;/span> &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>b &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">3d&lt;/span> &lt;span style="color:#ae81ff">62&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">33&lt;/span> &lt;span style="color:#ae81ff">66&lt;/span> &lt;span style="color:#ae81ff">35&lt;/span> &lt;span style="color:#ae81ff">66&lt;/span> &lt;span style="color:#ae81ff">37&lt;/span> &lt;span style="color:#ae81ff">66&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#ae81ff">35&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">33&lt;/span> &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">54&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>b &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">70&lt;/span> &lt;span style="color:#ae81ff">56&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">66&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">63&lt;/span> &lt;span style="color:#ae81ff">61&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .hash algorithm &lt;span style="color:#ae81ff">0x00008004&lt;/span> &lt;span style="color:#75715e">// SHA1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .ver &lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">private&lt;/span> auto ansi &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>&amp;lt;Module&amp;gt;&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#75715e">// end of class &amp;lt;Module&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">public&lt;/span> auto ansi beforefieldinit C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extends [System.Runtime]System.Object
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Methods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .method &lt;span style="color:#66d9ef">public&lt;/span> hidebysig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instance &lt;span style="color:#66d9ef">void&lt;/span> M () cil managed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Method begins at RVA 0x206c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Code size 29 (0x1d)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .maxstack &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .locals &lt;span style="color:#66d9ef">init&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [0]&lt;/span> int32 a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [1]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0000: nop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0001: ldc.i4.&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0002: stloc.&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0003: ldstr &lt;span style="color:#e6db74">&amp;#34;abc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0008: stloc.&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0009: ldloca.s &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_000b: call instance &lt;span style="color:#66d9ef">string&lt;/span> [System.Runtime]System.Int32::ToString()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0010: ldloc.&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0011: call &lt;span style="color:#66d9ef">string&lt;/span> [System.Runtime]System.String::Concat(&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0016: call &lt;span style="color:#66d9ef">void&lt;/span> [System.Console]System.Console::WriteLine(&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_001b: nop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_001c: ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#75715e">// end of method C::M&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .method &lt;span style="color:#66d9ef">public&lt;/span> hidebysig specialname rtspecialname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instance &lt;span style="color:#66d9ef">void&lt;/span> .ctor () cil managed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Method begins at RVA 0x2095&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Code size 8 (0x8)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .maxstack &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0000: ldarg.&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0001: call instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Object::.ctor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0006: nop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0007: ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#75715e">// end of method C::.ctor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#75715e">// end of class C&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">private&lt;/span> auto ansi &lt;span style="color:#66d9ef">sealed&lt;/span> beforefieldinit Microsoft.CodeAnalysis.EmbeddedAttribute
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extends [System.Runtime]System.Attribute
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> Microsoft.CodeAnalysis.EmbeddedAttribute::.ctor() = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Methods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .method &lt;span style="color:#66d9ef">public&lt;/span> hidebysig specialname rtspecialname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instance &lt;span style="color:#66d9ef">void&lt;/span> .ctor () cil managed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Method begins at RVA 0x2050&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Code size 8 (0x8)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .maxstack &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0000: ldarg.&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0001: call instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Attribute::.ctor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0006: nop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0007: ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#75715e">// end of method EmbeddedAttribute::.ctor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#75715e">// end of class Microsoft.CodeAnalysis.EmbeddedAttribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">private&lt;/span> auto ansi &lt;span style="color:#66d9ef">sealed&lt;/span> beforefieldinit System.Runtime.CompilerServices.RefSafetyRulesAttribute
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extends [System.Runtime]System.Attribute
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> Microsoft.CodeAnalysis.EmbeddedAttribute::.ctor() = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .custom instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.AttributeUsageAttribute::.ctor(valuetype [System.Runtime]System.AttributeTargets) = (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">54&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">0d&lt;/span> &lt;span style="color:#ae81ff">41&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>c &lt;span style="color:#ae81ff">6&lt;/span>c &lt;span style="color:#ae81ff">6f&lt;/span> &lt;span style="color:#ae81ff">77&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4d&lt;/span> &lt;span style="color:#ae81ff">75&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>c &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">70&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>c &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">54&lt;/span> &lt;span style="color:#ae81ff">02&lt;/span> &lt;span style="color:#ae81ff">09&lt;/span> &lt;span style="color:#ae81ff">49&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>e &lt;span style="color:#ae81ff">68&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">72&lt;/span> &lt;span style="color:#ae81ff">69&lt;/span> &lt;span style="color:#ae81ff">74&lt;/span> &lt;span style="color:#ae81ff">65&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Fields&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .field &lt;span style="color:#66d9ef">public&lt;/span> initonly int32 Version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Methods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .method &lt;span style="color:#66d9ef">public&lt;/span> hidebysig specialname rtspecialname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instance &lt;span style="color:#66d9ef">void&lt;/span> .ctor (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> int32 &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) cil managed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Method begins at RVA 0x2059&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Code size 15 (0xf)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .maxstack &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0000: ldarg.&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0001: call instance &lt;span style="color:#66d9ef">void&lt;/span> [System.Runtime]System.Attribute::.ctor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0006: nop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0007: ldarg.&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0008: ldarg.&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0009: stfld int32 System.Runtime.CompilerServices.RefSafetyRulesAttribute::Version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_000e: ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#75715e">// end of method RefSafetyRulesAttribute::.ctor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#75715e">// end of class System.Runtime.CompilerServices.RefSafetyRulesAttribute&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(注释是&lt;code>Sharpio&lt;/code>自动生成的)&lt;br>
额，看着是有点多，但其实很多只是自动生成的代码&lt;br>
如果只关注我们自己方法实现的话，实际只要看这么点就好&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>.method &lt;span style="color:#66d9ef">public&lt;/span> hidebysig instance &lt;span style="color:#66d9ef">void&lt;/span> M () cil managed &lt;span style="color:#75715e">//方法签名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .maxstack &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#75715e">//定义计算栈大小&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .locals &lt;span style="color:#66d9ef">init&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [0]&lt;/span> int32 a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [1]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#75715e">//初始化变量链表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0000: nop &lt;span style="color:#75715e">//啥也不干(Debug下编译)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0001: ldc.i4.&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#75715e">//初始化int32的数值3，并加载到计算栈上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0002: stloc.&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">//弹出一个栈顶元素，并存储到变量列表的0号位上(就是变量a)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0003: ldstr &lt;span style="color:#e6db74">&amp;#34;abc&amp;#34;&lt;/span> &lt;span style="color:#75715e">//初始化字符串&amp;#34;abc&amp;#34;，并加载到计算栈上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0008: stloc.&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">//弹出栈顶元素，存储到变量链表1号上(变量str)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0009: ldloca.s &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">//加载变量列表0号位(变量a)到计算栈上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_000b: call instance &lt;span style="color:#66d9ef">string&lt;/span> [System.Runtime]System.Int32::ToString()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//调用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0010: ldloc.&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">//加载变量列表1号位(变量str)到计算栈上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0011: call &lt;span style="color:#66d9ef">string&lt;/span> [System.Runtime]System.String::Concat(&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//调用方法，有几个参就弹出几个栈顶元素，返回值再压入栈&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_0016: call &lt;span style="color:#66d9ef">void&lt;/span> [System.Console]System.Console::WriteLine(&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//调用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_001b: nop &lt;span style="color:#75715e">//啥也不干&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL_001c: ret &lt;span style="color:#75715e">//方法结束，返回&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(已经打上了我自己的注释了)&lt;br>
所以其实也不是挺难的，就是IL的指令差不多都是简写，乍一看确实不明觉厉&lt;br>
(所以会看IL就可以出去装逼了😅)
IL还有很多指令，具体可以看我最上面推荐的两篇博客&lt;br>
这里的计算栈其实就是个可以放任何类型的栈，计算用的&lt;br>
具体的&lt;code>CLR&lt;/code>执行细节可以看看&lt;code>《CLR via C#》&lt;/code>讲的很详细&lt;/p></description></item><item><title>WPF学习笔记03-MVVM模型</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-mvvm%E6%A8%A1%E5%9E%8B/</link><pubDate>Sat, 22 Jul 2023 17:39:25 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-mvvm%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h2 id="0x00-mvvm模型介绍">&amp;lt;0x00&amp;gt; MVVM模型介绍
&lt;/h2>&lt;p>&lt;code>MVVM模型&lt;/code>并不是一个编程的语法，而是一种设计思路&lt;br>
整体分三块(&lt;code>M/V/VM&lt;/code>)&lt;br>
&lt;code>M&lt;/code>(Model)指数据模型，差不多就是程序的后端部分&lt;br>
&lt;code>V&lt;/code>(View)指界面，就是程序前端&lt;br>
&lt;code>VM&lt;/code>(View Model)，这个不大好翻译，其实就是负责前后端连接&lt;/p>
&lt;p>这样做有什么好处&lt;br>
简单说就是低耦合高内聚(网上都这么说的)&lt;br>
换句话说就是修改时更加的灵活，架构更加明白&lt;/p>
&lt;p>&lt;code>MVVM模型&lt;/code>是从&lt;code>MVC模型&lt;/code>发展过来的，主要解决的就是开发过程中代码结构混乱的问题&lt;br>
比方说开发一个项目，分前端后端，如果不采用这些设计思路，很可能两人各搞各的&lt;br>
要连接前后端，既可以是前端控制后端数据，也可以是后端修改前端显示&lt;br>
这样势必会造成整个项目的混乱，不好管理&lt;br>
所以&lt;code>MVVM模型&lt;/code>引入了&lt;code>VM&lt;/code>作为前后端的中间层&lt;br>
前端的&lt;code>V&lt;/code>可以通过&lt;code>VM&lt;/code>修改&lt;code>M&lt;/code>，后端的&lt;code>M&lt;/code>也可以通过&lt;code>VM&lt;/code>通知前端的&lt;code>V&lt;/code>要界面更新&lt;br>
这样的话，前后端本身就差不多分离了，前后端开发互不干扰&lt;br>
反正最后都是靠写一个&lt;code>VM&lt;/code>连接在一起的，当然相应的代码量就多了&lt;/p>
&lt;p>&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-mvvm%E6%A8%A1%E5%9E%8B/picture/1.png"
width="1270"
height="681"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-mvvm%E6%A8%A1%E5%9E%8B/picture/1_hu10220759246820115175.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-mvvm%E6%A8%A1%E5%9E%8B/picture/1_hu1984363372978414251.png 1024w"
loading="lazy"
alt="大致架构图"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>总之，&lt;code>MVVM模型&lt;/code>不是开发必须的，如果就一个人随便写写，那么肯定是怎么舒服怎么来的&lt;br>
如果是稍微大一点的项目，不采用合适的开发模式，到时候管理代码有的受的&lt;/p>
&lt;h2 id="0x01-如何在wpf中实现mvvm">&amp;lt;0x01&amp;gt; 如何在WPF中实现MVVM
&lt;/h2>&lt;p>WPF里面不是有些&lt;code>.xaml&lt;/code>的文件嘛，这些就是我们的&lt;code>V&lt;/code>&lt;br>
然后在整个工程中，我们还可以新建很多的&lt;code>.cs&lt;/code>文件(这个看你用什么&lt;code>.net&lt;/code>的语言)&lt;br>
这些&lt;code>.cs&lt;/code>文件就是我们的&lt;code>M&lt;/code>和&lt;code>VM&lt;/code>&lt;/p>
&lt;p>当然，为了区分方便，通常会在文件后面跟上后缀&lt;br>
比如&lt;code>*M.cs&lt;/code>代表这个文件描述的是一个数据模型&lt;br>
&lt;code>*VM.cs&lt;/code>代表这个文件描述的是一个&lt;code>VM&lt;/code>&lt;br>
反正怎么习惯怎么来就是&lt;/p>
&lt;p>在这篇博客里，我的文件命名没有这么这么规范&lt;br>
因为就像之前说的，&lt;code>MVVM&lt;/code>只是一种设计思路&lt;/p>
&lt;h2 id="0x02-正式开始实现">&amp;lt;0x02&amp;gt; 正式开始实现
&lt;/h2>&lt;p>首先先分析我们的需求，就拿我们之前的计算器吧&lt;br>
前端的实现我们已经有了，就是那个&lt;code>.xaml&lt;/code>文件&lt;/p>
&lt;p>后端我们就要先分析下了，怎么搞一个计算器的后端&lt;br>
首先我们先思考下一个计算器需要维护什么数据&lt;br>
因为我们打算实现的就是个日常的计算器而不是图形计算器之类的东西&lt;br>
所以肯定要维护一条当前的结果&lt;br>
然后还要一个标志符来保存当前选定的运算&lt;br>
同时还要有个&lt;code>flag&lt;/code>来表明正在计算&lt;br>
最后还要维护一个显示的值&lt;br>
所以总共是要维护4条数据&lt;/p>
&lt;p>所以对我们的计算器后端文件如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//Calculator.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//常见的引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Calculator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//这里按道理应该用private，通过对象方法调用这些变量，这里偷下懒&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> flag = &lt;span style="color:#66d9ef">false&lt;/span>; &lt;span style="color:#75715e">//表示正在计算&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">int?&lt;/span> calculate = &lt;span style="color:#66d9ef">null&lt;/span>; &lt;span style="color:#75715e">//标识当前的运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">double?&lt;/span> ans = &lt;span style="color:#66d9ef">null&lt;/span>; &lt;span style="color:#75715e">//存储当前的结果&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Display = &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>; &lt;span style="color:#75715e">//当前显示的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Calculate() &lt;span style="color:#75715e">//计算方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (calculate)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans += Double.Parse(Display);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans -= Double.Parse(Display);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans *= Double.Parse(Display);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans /= Double.Parse(Display);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来就是来写我们的&lt;code>VM&lt;/code>部分&lt;br>
我这个写得比较繁琐，但就是那个意思&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//ViewModel.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//常见的引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//要实现接口INotifyPropertyChanged&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ViewModel&lt;/span> : INotifyPropertyChanged
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//实现接口的要求，看不懂没关系，这么写就好&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">event&lt;/span> PropertyChangedEventHandler PropertyChanged;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> NotifyPropertyChanged(&lt;span style="color:#66d9ef">string&lt;/span> propertyName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PropertyChangedEventHandler handler = PropertyChanged;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(handler != &lt;span style="color:#66d9ef">null&lt;/span>) handler(&lt;span style="color:#66d9ef">this&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> PropertyChangedEventArgs(propertyName));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//声明一个Calculator对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> Calculator _calculator = &lt;span style="color:#66d9ef">new&lt;/span> Calculator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//声明一个Display属性，关键啊&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Display
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _calculator.Display; &lt;span style="color:#75715e">//定义get，挺正常的写法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _calculator.Display = &lt;span style="color:#66d9ef">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotifyPropertyChanged(&lt;span style="color:#e6db74">&amp;#34;Display&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//定义set，最后调用的方法通知属性已更改，让前端更新显示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MinusSign_Click() &lt;span style="color:#75715e">//减法的实现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_calculator.flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (Display[&lt;span style="color:#ae81ff">0&lt;/span>] == &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Display = Display.Substring(&lt;span style="color:#ae81ff">1&lt;/span>, Display.Length - &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Display = &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> + Display;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//后面方法的实现略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICommand ButtonMinusSign &lt;span style="color:#75715e">//将减法方法声明成属性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RelayCommand(MinusSign_Click);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//RelayCommand后面讲&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//后面的方法属性声明略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Display&lt;/code>要声明成属性的样式，因为&lt;code>xaml&lt;/code>里面能绑定的量要是属性&lt;br>
所以后面的按钮方法都要声明成属性，这样才能在&lt;code>xaml&lt;/code>里面绑定&lt;/p>
&lt;p>当然这里还出现了两个新东西&lt;br>
一个是接口&lt;code>INotifyPropertyChanged&lt;/code>，还有&lt;code>RelayCommand&lt;/code>&lt;br>
&lt;code>INotifyPropertyChanged&lt;/code>字面意思就是&lt;code>通知属性更改&lt;/code>&lt;br>
就是说这个类里面有属性在更改时需要通知前端，让前端显示的东西也跟着改&lt;br>
这个接口要求实现一个通知方法，反正就按上面的抄就好了&lt;br>
(大体的原理就是发起一个事件，传回去，让前端知道有东西变了，再回来看)&lt;br>
&lt;code>RelayCommand&lt;/code>是自己实现的类，代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//RelayCommand.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//常见的声明&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//实现ICommand接口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RelayCommand&lt;/span> : ICommand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//一个只读的Action属性，存储指令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Action ExecuteAction { &lt;span style="color:#66d9ef">get&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">event&lt;/span> EventHandler CanExecuteChanged;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//构造函数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> RelayCommand(Action executeAction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ExecuteAction = executeAction;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//表示能不能执行(我们这就默认能执行)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> CanExecute(&lt;span style="color:#66d9ef">object&lt;/span> parameter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//调用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Execute(&lt;span style="color:#66d9ef">object&lt;/span> parameter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ExecuteAction();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>就是这样，本质就是用泛型委托打包了个方法&lt;br>
这个类也方便我们把方法打包成一个属性，好绑定到&lt;code>xaml&lt;/code>中&lt;/p>
&lt;p>最后终于是我们的前端界面了&lt;br>
其实多的不用改&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#a6e22e">x:Class=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;WPFTest.MainWindow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:d=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:mc=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:local=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:WPFTest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">d:DataContext=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{d:DesignInstance Type=local:ViewModel}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mc:Ignorable=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;400&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;300&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WindowStartupLocation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CenterScreen&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AllowsTransparency=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Transparent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;None&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--这里指定了DataContext，让xaml能找到对应的属性--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Margin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;FontSize&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;24&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Foreground&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;White&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Template&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;border&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#241238&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CornerRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{TemplateBinding Content}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Trigger&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IsMouseOver&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">TargetName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;border&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Background&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#190D24&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Trigger&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Trigger&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IsPressed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">TargetName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;border&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Background&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Black&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Trigger&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">CornerRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MouseMove=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Border_MouseMove&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;LinearGradientBrush&lt;/span> &lt;span style="color:#a6e22e">StartPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">EndPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#392669&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#46204F&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DropShadowEffect&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Gray&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ShadowDepth=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BlurRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Opacity=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Direction=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;auto&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;auto&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;StackPanel&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Orientation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Horizontal&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Right&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Minimize&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Minimize_Click&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Ellipse&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Fill=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#F0DC4E&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Close&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Close_Click&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Ellipse&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Fill=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#F0443E&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/StackPanel&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Answer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Display}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;28&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Right&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Foreground=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;White&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--Text这里绑定的是显示的内容--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_MinusSign&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Command=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding ButtonMinusSign}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;±&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--Command这里绑定的就是按钮的指令--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--后面的Button就不写了--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实就打注释的那三处要变，别的都不用改&lt;/p>
&lt;h2 id="0x03-mvvm模型到底有什么用">&amp;lt;0x03&amp;gt; MVVM模型到底有什么用
&lt;/h2>&lt;p>说实在的，我刚学完这模型我也是说这玩意有啥用&lt;br>
甚至觉得我是不是少看了些什么&lt;br>
因为从逻辑上，这么写代码，代码量多了，但功能都没变过&lt;br>
就感觉这么写很多余&lt;/p>
&lt;p>但实际上，我思考了好一阵(也是这篇博客拖这么久写完的原因)&lt;br>
这个项目太小了，体现不出来&lt;br>
想象一个稍微大点的项目，前后端分别开发的&lt;br>
假设最终就两个主要的文件，一个前端，一个后端&lt;br>
如果说后端突然抽风要改方法名，那前端也得跟着改(这就是耦合的情况)&lt;br>
但如果用&lt;code>MVVM&lt;/code>模型，在前后端之间再加层&amp;quot;胶水&amp;quot;层&lt;br>
这样当后端改名的时候，&amp;ldquo;胶水&amp;quot;层的名字没改，前端就不用改，提高了效率&lt;br>
(这样也叫解耦)&lt;/p>
&lt;p>别的好处我也很难讲了，毕竟目前我的开发经验不多&lt;br>
正如我最前面写的，这个只是个思想，并不是什么语法之类的&lt;br>
(总算写完了)&lt;/p></description></item><item><title>WPF学习笔记02-简单美化计算器</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E7%AE%80%E5%8D%95%E7%BE%8E%E5%8C%96%E8%AE%A1%E7%AE%97%E5%99%A8/</link><pubDate>Mon, 17 Jul 2023 01:04:58 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E7%AE%80%E5%8D%95%E7%BE%8E%E5%8C%96%E8%AE%A1%E7%AE%97%E5%99%A8/</guid><description>&lt;h2 id="0x00-wpf的界面美化挺方便的">&amp;lt;0x00&amp;gt; WPF的界面美化挺方便的
&lt;/h2>&lt;p>就研究了一小时不到，成功让计算器的UI上升了一个档次&lt;/p>
&lt;p>先看成果(因为相较于之前的界面确实帅多了)&lt;br>
&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E7%AE%80%E5%8D%95%E7%BE%8E%E5%8C%96%E8%AE%A1%E7%AE%97%E5%99%A8/picture/1.png"
width="300"
height="400"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E7%AE%80%E5%8D%95%E7%BE%8E%E5%8C%96%E8%AE%A1%E7%AE%97%E5%99%A8/picture/1_hu16039017282033186944.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E7%AE%80%E5%8D%95%E7%BE%8E%E5%8C%96%E8%AE%A1%E7%AE%97%E5%99%A8/picture/1_hu7583576121218424107.png 1024w"
loading="lazy"
alt="全新界面"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;br>
现代多了&lt;br>
(为了显示效果改了下比例)&lt;br>
咱们一块块慢慢讲&lt;/p>
&lt;h2 id="0x01-如何实现自定义窗口控件与圆角窗口">&amp;lt;0x01&amp;gt; 如何实现自定义窗口控件与圆角窗口
&lt;/h2>&lt;p>首先看这个界面，比较特殊的就是这个窗口有圆角&lt;br>
而且右上角的按钮不是&lt;code>Windows&lt;/code>的默认样式&lt;br>
(红色的按钮是关闭，黄色的是最小化窗口)&lt;/p>
&lt;p>要做到这一点，我们要让窗口运行在无边框的模式下&lt;br>
但运行在无边框模式下后，原先的窗口控件也没有了&lt;br>
所以要自己写按钮实现窗口关闭和窗口最小化的功能&lt;br>
(窗口最大化也差不多的逻辑，但这里不需要实现)&lt;/p>
&lt;h3 id="无边框窗口">无边框窗口
&lt;/h3>&lt;p>首先要设置个无边框的窗口&lt;br>
我们需要在&lt;code>&amp;lt;Window&amp;gt;&lt;/code>标签里面加上&lt;code>WindowStyle=&amp;quot;None&amp;quot;&lt;/code>就可以实现无边框的窗口了&lt;/p>
&lt;p>(@ 23-07-19)&lt;br>
其实更正规的做法应该是用&lt;code>WindowChrome&lt;/code>，当时不大会，这个只能说是个下策&lt;br>
这个方法本质上是抛弃了非工作区的控件而在工作区重写这些窗口控件，效率有点低&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#a6e22e">x:Class=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;WPFTest.MainWindow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:d=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:mc=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:local=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:WPFTest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mc:Ignorable=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;400&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;300&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WindowStartupLocation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CenterScreen&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">AllowsTransparency=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Transparent&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">WindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;None&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--...--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(差不多就这样，没讲的属性后面讲)&lt;/p>
&lt;p>这样，我们确实获得了一个无边框的窗口&lt;br>
但这样有几个问题&lt;br>
第一，窗口的圆角无法调整&lt;br>
第二，窗口不能拖动&lt;/p>
&lt;h4 id="解决第一个问题">解决第一个问题
&lt;/h4>&lt;p>这意味着我们要自己写一个窗口实现&lt;br>
(其实不难)&lt;br>
系统的窗口相当于最下面的图层&lt;br>
现在这个窗口不能满足我们的需求，所以我们要先隐藏自带的窗口&lt;br>
在&lt;code>&amp;lt;Window&amp;gt;&lt;/code>标签里面加上&lt;code>AllowsTransparency=&amp;quot;True&amp;quot;&lt;/code>和&lt;code>Background=&amp;quot;Transparent&amp;quot;&lt;/code>&lt;br>
这两条属性表示允许窗口透明并设置窗口背景为透明&lt;/p>
&lt;p>下面我们要自己写一个背景来代替原来的窗口背景&lt;br>
我们之前不是拿一个&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>包裹所有的控件吗&lt;br>
既然是背景，那层级肯定是比这个&lt;code>Grid&lt;/code>更高的&lt;br>
所以只需要在&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>外面再套个&lt;code>&amp;lt;Border&amp;gt;&lt;/code>就好&lt;br>
(&lt;code>&amp;lt;Border&amp;gt;&lt;/code>可以简单理解为绘制一个矩形)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--差不多像这样--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--...--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;lt;Border&amp;gt;&lt;/code>也可以设置不少的属性&lt;br>
为了实现窗口圆角，设置下&lt;code>CornerRadius&lt;/code>就好&lt;/p>
&lt;h4 id="解决第二个问题">解决第二个问题
&lt;/h4>&lt;p>在原生的窗口中，窗口的移动是靠上面的那一条的&lt;br>
相当于窗口移动事件是绑定在那一条控件上的&lt;/p>
&lt;p>现在我们隐藏了，所以要自己去绑定这个窗口移动事件&lt;br>
现在刚好写了个&lt;code>&amp;lt;Border&amp;gt;&lt;/code>，这个可以绑定窗口移动事件&lt;br>
在&lt;code>&amp;lt;Border&amp;gt;&lt;/code>绑定&lt;code>MouseMove&lt;/code>事件(就是添加个属性)&lt;br>
这个相当于之前给&lt;code>Button&lt;/code>绑定&lt;code>Click&lt;/code>事件，要在对应&lt;code>.cs&lt;/code>里面实现功能&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Border_MouseMove(&lt;span style="color:#66d9ef">object&lt;/span> sender, MouseEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (e.LeftButton == MouseButtonState.Pressed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.DragMove();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>加上这段代码就好&lt;br>
现在这个窗口就能拖动了&lt;/p>
&lt;h3 id="自定义窗口控件按钮">自定义窗口控件按钮
&lt;/h3>&lt;p>本质上就是自己写个按钮，一个用来关闭程序，一个用来最小化&lt;br>
(当然为了能放下这俩按钮还需要对页面布局做个小改动，这里就不写了)&lt;br>
直接贴代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//关闭窗口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Close_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.Close();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//最小化窗口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Minimize_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.WindowState = WindowState.Minimized;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两个方法绑定到对应的按钮就好&lt;/p>
&lt;h2 id="0x02-如何实现圆角的按钮">&amp;lt;0x02&amp;gt; 如何实现圆角的按钮
&lt;/h2>&lt;p>要实现圆角的按钮，我们需要重写按钮的绘制方法&lt;br>
在&lt;code>xaml&lt;/code>中，这个重写其实也挺简单的，我们仅需更改按钮的模板&lt;/p>
&lt;p>更改模板的方法有两种，先讲怎么更改单个按钮的模板&lt;br>
(关闭窗口和最小化窗口的按钮样式就是这么实现的)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--具体的实现--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在具体的实现里面写上绘制的样式就行了&lt;/p>
&lt;p>如果有很多的按钮需要更改为一个统一的样式，我们需要在&lt;code>&amp;lt;Style&amp;gt;&lt;/code>中更改模板&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--其他Setter--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Template&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--具体的实现--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，如果模板要绑定属性，&lt;code>TargetType=&amp;quot;Button&amp;quot;&lt;/code>不能省&lt;br>
(&lt;code>{TemplateBinding Content}&lt;/code>就是个绑定的语法，相当于拷贝&lt;code>Button.Content&lt;/code>的内容)&lt;br>
(具体看原代码吧，绑定确实不大好解释)&lt;/p>
&lt;p>更改过模板后，原来的触发器也给替换掉了，要我们自己再写一套&lt;br>
(就是比方说鼠标放按钮上，按钮的颜色变深一点之类的)&lt;br>
这个就要在&lt;code>&amp;lt;ControlTemplate&amp;gt;&lt;/code>块中加上&lt;code>&amp;lt;ControlTemplate.Triggers&amp;gt;&lt;/code>块&lt;br>
再在里面写上若干&lt;code>&amp;lt;Trigger&amp;gt;&lt;/code>即可&lt;br>
&lt;code>&amp;lt;Trigger&amp;gt;&lt;/code>就用来控制前端的显示，不管后端的&lt;/p>
&lt;p>&lt;code>&amp;lt;Trigger&amp;gt;&lt;/code>中有&lt;code>Property&lt;/code>(设置触发器类型)和&lt;code>Value&lt;/code>(设置触发值)&lt;br>
常用的&lt;code>Property&lt;/code>有&lt;code>IsMouseOn&lt;/code>(鼠标在不在上面)和&lt;code>IsPressed&lt;/code>(鼠标有没有按下)&lt;br>
&lt;code>&amp;lt;Trigger&amp;gt;&lt;/code>块中通过&lt;code>&amp;lt;Setter&amp;gt;&lt;/code>来设置样式&lt;br>
这里的&lt;code>&amp;lt;Setter&amp;gt;&lt;/code>需要加上&lt;code>TargetName&lt;/code>(因为可能有好几个需要绘制的东西)&lt;/p>
&lt;h2 id="0x03-如何实现背景的色彩渐变">&amp;lt;0x03&amp;gt; 如何实现背景的色彩渐变
&lt;/h2>&lt;p>添加色彩渐变很简单&lt;br>
&lt;code>&amp;lt;Border&amp;gt;&lt;/code>块中加上这些代码即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;LinearGradientBrush&lt;/span> &lt;span style="color:#a6e22e">StartPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EndPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#392669&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#46204F&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>&amp;lt;LinearGradientBrush&amp;gt;&lt;/code>指定了线性渐变&lt;br>
&lt;code>StartPoint&lt;/code>与&lt;code>EndPoint&lt;/code>指定了起止点，&lt;code>&amp;quot;0,0&amp;quot;&lt;/code>表示左上角，&lt;code>&amp;quot;0,1&amp;quot;&lt;/code>表示左下角&lt;br>
&lt;code>&amp;lt;GradientStop&amp;gt;&lt;/code>中可以指定渐变的颜色，&lt;code>Offset&lt;/code>相当于颜色在渐变条上的位置&lt;br>
(如果用过些图像处理工具应该是能理解&lt;code>Offset&lt;/code>的功能的)&lt;/p>
&lt;h2 id="0x04-绘制窗口阴影">&amp;lt;0x04&amp;gt; 绘制窗口阴影
&lt;/h2>&lt;p>因为我们已经把原生的窗口干掉了嘛，所以窗口阴影也没了&lt;br>
没窗口阴影的话总是看着有些违和&lt;/p>
&lt;p>添加窗口阴影也很简单&lt;br>
&lt;code>&amp;lt;Border&amp;gt;&lt;/code>块中加上这些代码即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DropShadowEffect&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Gray&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ShadowDepth=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">BlurRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Opacity=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.5&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Direction=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>&amp;lt;Border&amp;gt;&lt;/code>中也要调整下&lt;code>Margin&lt;/code>属性，不然阴影可能显示不出&lt;/p>
&lt;h2 id="附录">附录
&lt;/h2>&lt;p>&lt;code>MainWindow.xaml.cs&lt;/code>的代码就不贴了，基本没什么改动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#a6e22e">x:Class=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;WPFTest.MainWindow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:d=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:mc=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:local=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:WPFTest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mc:Ignorable=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;400&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;300&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WindowStartupLocation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CenterScreen&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">AllowsTransparency=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Transparent&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">WindowStyle=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;None&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Margin&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;FontSize&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;24&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Foreground&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;White&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Template&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;border&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#241238&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">CornerRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{TemplateBinding Content}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Trigger&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IsMouseOver&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">TargetName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;border&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Background&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#190D24&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Trigger&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Trigger&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IsPressed&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">TargetName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;border&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Background&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Black&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Trigger&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter.Value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Setter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">CornerRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">MouseMove=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Border_MouseMove&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;LinearGradientBrush&lt;/span> &lt;span style="color:#a6e22e">StartPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EndPoint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0,1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#392669&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;GradientStop&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#46204F&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Offset=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border.Background&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DropShadowEffect&lt;/span> &lt;span style="color:#a6e22e">Color=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Gray&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ShadowDepth=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">BlurRadius=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Opacity=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.5&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Direction=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border.Effect&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;auto&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;auto&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;StackPanel&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Orientation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Horizontal&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Right&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Minimize&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Minimize_Click&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Ellipse&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Fill=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#F0DC4E&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Close&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Close_Click&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Ellipse&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Fill=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#F0443E&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button.Template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/StackPanel&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Answer&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;28&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Right&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Foreground=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;White&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_MinusSign&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_MinusSign_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;±&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Clear&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Clear_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CE&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Backspace&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Backspace_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;←&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num9&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num9_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;9&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num8&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num8_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num7&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num7_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;7&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num6&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num6_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num5&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num5_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num4&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num4_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num3_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num2_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num1_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num0_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.ColumnSpan=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Dot&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Dot_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Div&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Div_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Mul&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Mul_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Sub&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Sub_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Add&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Add_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Equal&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Equal_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(经典写博客耗时比写代码多😂)&lt;/p></description></item><item><title>WPF学习笔记01-一个简单的计算器</title><link>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/</link><pubDate>Sat, 15 Jul 2023 20:51:01 +0000</pubDate><guid>https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/</guid><description>&lt;h2 id="0x00-我为何选择wpf">&amp;lt;0x00&amp;gt; 我为何选择WPF
&lt;/h2>&lt;p>(@ 23-08-25)&lt;br>
慢慢学了一个月，总算知道为啥现在用&lt;code>WPF&lt;/code>的个人项目不多了&lt;br>
写简单的&lt;code>UI&lt;/code>确实非常方便，但如果要用些现代些的设计就很烦了&lt;br>
非常容易出现些神秘问题&lt;/p>
&lt;p>这个我也说不明白，大概就是因为之前看到有些项目的窗口就是&lt;code>WPF&lt;/code>写的吧&lt;/p>
&lt;p>一定要找个理由就是&lt;code>WPF&lt;/code>的支持丰富&lt;br>
作为一个老UI框架，教程满天飞，更重要的是，用&lt;code>WPF&lt;/code>仍可以设计出现代的UI&lt;br>
(而且相比那些&lt;code>electron&lt;/code>框架来说性能更好，只要不搞跨平台)&lt;/p>
&lt;p>目前在&lt;code>Windows&lt;/code>下，微软这常见的有四套UI框架&lt;br>
分别是：&lt;code>WinFrom&lt;/code>、&lt;code>WPF&lt;/code>、&lt;code>WinUI3&lt;/code>、&lt;code>XAUI&lt;/code>&lt;br>
&lt;code>WinFrom&lt;/code>实在是老，做一些效果动画会比较费力&lt;br>
&lt;code>WPF&lt;/code>虽然也挺老的，但支持的特性足够做些不错的UI了&lt;br>
&lt;code>WinUI3&lt;/code>新是新，但教程不多，文档支持也比较神秘&lt;br>
&lt;code>XAUI&lt;/code>能跨平台，但微软特色，永不推广，而且也比较新，文档比较神秘&lt;/p>
&lt;p>从&lt;code>WPF&lt;/code>开始，微软的UI框架都是要写&lt;code>.xaml&lt;/code>的&lt;br>
所以学会&lt;code>WPF&lt;/code>之后，迁移到微软更新的UI框架的学习成本是相对低的&lt;/p>
&lt;p>目前我体验下来&lt;code>WPF&lt;/code>算是很好入门的了，只需要会一门&lt;code>.net&lt;/code>框架下的语言就可以入门&lt;br>
&lt;code>xaml&lt;/code>语法也不难，可以说看多了也会了&lt;br>
而且微软的看家本领，UI的可视化开发(Visual Studio)，这对效率提升真的很有帮助&lt;/p>
&lt;p>这篇文章的代码来自我自己随便搞的简易计算器&lt;br>
(整个程序就花了一个小时写完，足见&lt;code>WPF&lt;/code>是多方便)&lt;/p>
&lt;h2 id="0x01-wpf的典型结构">&amp;lt;0x01&amp;gt; WPF的典型结构
&lt;/h2>&lt;p>我这里创建的是基于&lt;code>C#&lt;/code>的&lt;code>WPF&lt;/code>项目&lt;/p>
&lt;p>创建完我们可以看到如图的项目结构&lt;br>
&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/picture/1.png"
width="279"
height="258"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/picture/1_hu12635043704618703398.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/picture/1_hu17982825976639104812.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>
差不多就是一个&lt;code>.xaml&lt;/code>文件下套&lt;code>.cs&lt;/code>文件&lt;/p>
&lt;p>其中在&lt;code>App.xaml&lt;/code>文件中，定义了这个应用的基本信息(主要就是启动窗口是哪一个)&lt;br>
&lt;code>MainWindows.xaml&lt;/code>定义了窗口的样式(这个的编辑界面就是一半实时预览窗口，一半是代码编辑器)&lt;br>
下面的&lt;code>.cs&lt;/code>文件可以说描述程序的行为&lt;/p>
&lt;p>简单来说就是&lt;code>.xaml&lt;/code>文件管前端(界面)，&lt;code>.cs&lt;/code>文件管后端(行为)&lt;br>
具体的东西后面再讲&lt;/p>
&lt;h2 id="0x02-xaml的简单语法">&amp;lt;0x02&amp;gt; XAML的简单语法
&lt;/h2>&lt;p>&lt;code>xaml&lt;/code>这玩意就是参考&lt;code>xml&lt;/code>语法的&lt;br>
如果能看懂&lt;code>xml&lt;/code>甚至是&lt;code>html&lt;/code>也能看懂&lt;code>xaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--MainWindow.xaml--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Window&lt;/span> &lt;span style="color:#a6e22e">x:Class=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;WPFTest.MainWindow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:x=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:d=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:mc=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:local=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clr-namespace:WPFTest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mc:Ignorable=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Title=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MainWindow&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;800&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;800&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Margin&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;FontSize&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;30&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition&lt;/span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;auto&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Answer&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;30&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Right&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ColumnDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RowDefinition/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_MinusSign&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_MinusSign_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;±&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Clear&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Clear_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CE&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Backspace&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Backspace_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;←&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num9&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num9_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;9&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num8&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num8_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num7&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num7_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;7&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num6&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num6_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num5&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num5_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num4&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num4_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num3_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num2_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num1_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Num0_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.ColumnSpan=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Dot&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Dot_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Div&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Div_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Mul&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Mul_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Sub&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Sub_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Add&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Add_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Button&lt;/span> &lt;span style="color:#a6e22e">Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Equal&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Click=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Button_Equal_Click&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Content=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Grid.Row=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Grid&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Window&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(为了代码高亮正常工作，这里的代码设置为&lt;code>xml&lt;/code>的高亮格式)&lt;br>
一块块掰碎讲&lt;/p>
&lt;h3 id="声明部分">声明部分
&lt;/h3>&lt;p>就是最上面一坨不知道什么东西的部分，随便写写的话根本不需要知道这些是啥，别动就好&lt;br>
(因为我目前也不是很懂这些)&lt;/p>
&lt;h3 id="windowresources">&amp;lt;Window.Resources&amp;gt;
&lt;/h3>&lt;p>这里面我就定义了个&lt;code>Button&lt;/code>类型的&lt;code>Style&lt;/code>&lt;br>
其实就是规定了&lt;code>Button&lt;/code>的一些默认参数&lt;br>
在下面写&lt;code>Button&lt;/code>的时候就不用一个个都写这些东西了&lt;/p>
&lt;p>&lt;code>Style&lt;/code>里面定义了按钮到界面边界的距离(&lt;code>Margin&lt;/code>)有5单位&lt;br>
字体大小(&lt;code>FontSize&lt;/code>)为30个单位&lt;br>
(在&lt;code>WPF&lt;/code>里，并不是以像素为单位，而是按&lt;code>DPI&lt;/code>来确定实际像素单位大小)&lt;/p>
&lt;p>&lt;code>&amp;lt;Style&amp;gt;&lt;/code>里面要指定设置的类型(&lt;code>TargetType&lt;/code>)&lt;br>
在&lt;code>&amp;lt;Style&amp;gt;&lt;/code>块中，用&lt;code>&amp;lt;Setter&amp;gt;&lt;/code>标签来设置类型下面的属性&lt;br>
&lt;code>&amp;lt;Setter&amp;gt;&lt;/code>标签里面&lt;code>Property&lt;/code>选择属性，&lt;code>Value&lt;/code>选择值&lt;/p>
&lt;h3 id="grid">&amp;lt;Grid&amp;gt;
&lt;/h3>&lt;p>在&lt;code>WPF&lt;/code>中，有两种常用的界面布局&lt;br>
分别是：网格布局(&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>)和栈布局(&lt;code>&amp;lt;StackPanel&amp;gt;&lt;/code>)&lt;br>
&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>可以把一块区域分割成一个网格，网格里面可以塞控件&lt;br>
&lt;code>&amp;lt;StackPanel&amp;gt;&lt;/code>就是个栈，所有控件从上到下(从左到右)排列&lt;br>
基本上用这两种布局的互相嵌套能解决绝大多数的布局&lt;br>
我这里的布局选择了&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>里面再套一个&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>&lt;/p>
&lt;h4 id="具体实现">具体实现
&lt;/h4>&lt;p>在&lt;code>&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/code>块里面塞两个&lt;code>&amp;lt;RowDefinition/&amp;gt;&lt;/code>把Grid分成两行&lt;br>
(塞几个&lt;code>&amp;lt;RowDefinition/&amp;gt;&lt;/code>就是有几行，列同理)&lt;br>
在一个&lt;code>&amp;lt;RowDefinition/&amp;gt;&lt;/code>里加入&lt;code>Height=&amp;quot;auto&amp;quot;&lt;/code>表示第一行的高度随内容改变&lt;br>
(就是跟着第一行的控件高度走)&lt;/p>
&lt;p>然后正式往Grid网格里面塞控件，先第一行&lt;br>
首先是再塞了个&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>，然后在里面塞了个&lt;code>&amp;lt;TextBlock&amp;gt;&lt;/code>&lt;br>
其中，&lt;code>Grid.Row&lt;/code>可以指定控件所在的网格行号，列同理&lt;br>
并定义了一系列的属性参数&lt;br>
(&lt;code>Name&lt;/code>属性就是给&lt;code>.cs&lt;/code>调用的对象名，&lt;code>HorizontalAlignment&lt;/code>是水平对正方式，设置为右对齐)&lt;br>
(不是很懂我当时写的逻辑，其实不用多写个&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>，直接塞&lt;code>&amp;lt;TextBlock&amp;gt;&lt;/code>就好)&lt;/p>
&lt;p>第二行，塞了个&lt;code>&amp;lt;Grid&amp;gt;&lt;/code>，并定义出5*4的网格&lt;br>
下面就是一大堆的按键定义，相对比较无趣&lt;br>
值得说道的是&lt;code>Click&lt;/code>属性，这个会指向对应&lt;code>.cs&lt;/code>的一个具体的方法名，实现前后端的融合&lt;br>
(具体看后端实现就可以了)&lt;br>
还有按钮&lt;code>0&lt;/code>多了个&lt;code>Grid.ColumnSpan=&amp;quot;2&amp;quot;&lt;/code>，这个就是让这个按钮可以跨两列显示&lt;br>
由于有之前的&lt;code>&amp;lt;Style&amp;gt;&lt;/code>的定义，所有的按钮都自带字体大小30单位，间距5单位的属性&lt;/p>
&lt;p>这样，我们成功整出了一个简单的计算器界面&lt;br>
长这样的&lt;br>
&lt;img src="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/picture/2.png"
width="392"
height="400"
srcset="https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/picture/2_hu1622169172083775048.png 480w, https://mlacookie.github.io/article/categories/wpf/wpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/picture/2_hu2022865190909755559.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="235px"
>&lt;/p>
&lt;h2 id="0x03-与c后端的结合">&amp;lt;0x03&amp;gt; 与C#后端的结合
&lt;/h2>&lt;p>(@ 23-08-14)&lt;br>
实际上这样并不是搞后端，这些都是再定义前端的行为&lt;br>
具体搞后端可以看我之后写的讲&lt;code>MVVM&lt;/code>设计模型的博客&lt;br>
但如果项目很小的话这样搞也没问题的&lt;/p>
&lt;p>与C#后端的结合可以说非常简单，就是调用和更改控件对象的成员值就可以&lt;br>
还记得我们已经在&lt;code>.xaml&lt;/code>中为一些控件添加了&lt;code>Name&lt;/code>属性吗&lt;br>
这些&lt;code>Name&lt;/code>属性是实现前后端融合的关键&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//等于号按键点击事件的实现逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Equal_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag &amp;amp;&amp;amp; ans != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = ans.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>别的都不重要，还记得我们有一个&lt;code>&amp;lt;TextBlock&amp;gt;&lt;/code>的&lt;code>Name&lt;/code>属性设置为&lt;code>Answer&lt;/code>吗&lt;br>
通过&lt;code>Answer.Text&lt;/code>可以直接访问并修改&lt;code>&amp;lt;TextBlock&amp;gt;&lt;/code>的内容，非常方便&lt;br>
(&lt;code>Answer.Text&lt;/code>就是&lt;code>String&lt;/code>类型)&lt;br>
其他的控件也同理&lt;/p>
&lt;p>接下来要处理下按钮的点击事件了&lt;br>
这个也非常简单，我们之前已经设置了每个按钮的&lt;code>Click&lt;/code>属性&lt;br>
接下来就是在对应的&lt;code>.cs&lt;/code>中实现逻辑就好&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//大概的结构&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MainWindow&lt;/span> : Window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_MinusSign_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//加负号按钮的点击事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Clear_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//清屏键的点击事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Backspace_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//退格键的点击事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num9_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num8_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num7_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num6_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num5_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num4_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num3_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num2_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num1_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num0_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//各个数字键的点击事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Dot_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//小数点按键的点击事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Div_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Mul_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Sub_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Add_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//+-*/键的点击事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Equal_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//等于号的点击事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个按钮的点击事件都相当于在&lt;code>C#&lt;/code>中的一个方法&lt;br>
点击一次就触发一次&lt;/p>
&lt;h2 id="附录">附录
&lt;/h2>&lt;p>完整的&lt;code>MainWindow.xaml&lt;/code>已经贴在上文了，这里就不再放了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//MainWindow.xaml.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Collections.Generic;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Linq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Threading.Tasks;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Controls;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Documents;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Input;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Media;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Media.Imaging;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Navigation;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Windows.Shapes;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> WPFTest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">partial&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MainWindow&lt;/span> : Window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int?&lt;/span> calculate = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double?&lt;/span> ans = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MainWindow()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Calculate()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (calculate)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans += Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans -= Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans *= Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans /= Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_MinusSign_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (Answer.Text[&lt;span style="color:#ae81ff">0&lt;/span>]==&lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = Answer.Text.Substring(&lt;span style="color:#ae81ff">1&lt;/span>, Answer.Text.Length - &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> + Answer.Text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Clear_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Backspace_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = Answer.Text.Substring(&lt;span style="color:#ae81ff">0&lt;/span>, Answer.Text.Length - &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (Answer.Text.Length == &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num9_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;9&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;9&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num8_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num7_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;7&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;7&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num6_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num5_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num4_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num3_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num2_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num1_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Num0_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Dot_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text += &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Div_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (ans == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = ans.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Mul_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (ans == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = ans.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Sub_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (ans == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = ans.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Add_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (ans == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans = Double.Parse(Answer.Text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = ans.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Button_Equal_Click(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag &amp;amp;&amp;amp; ans != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Answer.Text = ans.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calculate = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>逻辑就是随性写的，不保证完全没Bug，应该是没严重Bug的&lt;br>
(所以也没写高精度的运算处理)&lt;br>
(写这篇博客比我写代码的时间都长😂)&lt;/p></description></item><item><title>浙工大离散课设讲解</title><link>https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 04 Jul 2023 13:14:00 +0000</pubDate><guid>https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>一般来说离散的课设都是给一大堆题目然后自己选的&lt;br>
我选的是合式公式的真值表和成真成假赋值&lt;br>
算是里面相对难的&lt;br>
(别的是真挺简单的)&lt;/p>
&lt;p>课设我是拿&lt;code>C#&lt;/code>写的(人生苦短，还是用好用的语言吧)&lt;br>
应该常用的&lt;code>.net&lt;/code>版本都能跑起来吧，代码里没怎么用新特性&lt;br>
(我用的是&lt;code>.net 6.0&lt;/code>)&lt;br>
&lt;code>C#&lt;/code>的语法还是挺好懂得，用过C系语言看懂应该问题不大&lt;/p>
&lt;p>同样，可以在本文最后复制所有的原码&lt;br>
(就一个文件，就不发本站的&lt;code>gitea&lt;/code>了)&lt;br>
(报告自己写写挺快的)&lt;/p>
&lt;h2 id="0x00-如何解析合式公式">&amp;lt;0x00&amp;gt; 如何解析合式公式
&lt;/h2>&lt;p>在尝试解析合式公式前，我们可以先想想我们该如何解析一般加减乘除的&lt;br>
(所谓解析就是判断计算的优先级)&lt;/p>
&lt;p>比方说我们有公式&lt;code>1+2*3/(4-5)&lt;/code>&lt;br>
按运算优先级加上括号就是&lt;code>(1+((2*3)/(4-5)))&lt;/code>&lt;br>
所以说我们该如何让计算机按这样的优先级计算呢&lt;/p>
&lt;p>双栈法&lt;br>
准备两个栈，一个是运算数栈，一个是运算符栈&lt;br>
运算式在运算前先在首位各加括号(确保最后会栈空)&lt;br>
然后从左向右遍历运算式&lt;br>
遇到&lt;code>(&lt;/code>时直接压入运算符栈，遇到数字压入运算数栈&lt;br>
当遇到运算符时，先检查当前运算符优先级是否大于栈顶运算符，如是，直接压入&lt;br>
如果不是，那么就先进行弹出操作&lt;br>
每次弹出都是弹出一个运算符与两个运算数，并将运算结果再压入运算符栈中&lt;br>
重复弹出，直到当前运算符优先级大于运算符栈顶的运算符优先级为止&lt;br>
如果遍历过程中遇到&lt;code>)&lt;/code>，则反复进行弹出操作，直到弹出一个&lt;code>(&lt;/code>为止&lt;/p>
&lt;p>&lt;img src="https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/picture/1.gif"
width="400"
height="400"
srcset="https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/picture/1_hu10804910295702382285.gif 480w, https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/picture/1_hu8498918969571945684.gif 1024w"
loading="lazy"
alt="演示动画"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;br>
(动画是用&lt;code>manim&lt;/code>做的，头一次做)&lt;/p>
&lt;p>同样的思路也可以运用在合式公式上&lt;br>
具体流程如下：&lt;/p>
&lt;ul>
&lt;li>1 给公式的左右套上括号&lt;/li>
&lt;li>2 从左向右读取&lt;/li>
&lt;li>3 如果遇到&lt;code>(&lt;/code>，将&lt;code>(&lt;/code>压入&lt;code>运算符栈&lt;/code>后继续&lt;/li>
&lt;li>4 如果遇到运算数，压入&lt;code>操作数栈&lt;/code>后继续&lt;/li>
&lt;li>5 如果遇到运算符，按照以下规则：
&lt;ul>
&lt;li>a 如果&lt;code>运算符栈&lt;/code>为空或栈顶元素优先级小于当前运算符，直接压入&lt;code>运算符栈&lt;/code>&lt;/li>
&lt;li>b 若遇到栈顶元素为&lt;code>┐(非)&lt;/code>，需要弹出所有的连续&lt;code>┐(非)&lt;/code>，弹出此运算符再弹出一个运算数，并将运算结果压回&lt;code>操作数栈&lt;/code>&lt;/li>
&lt;li>c 其余情况按照弹出一个运算符并弹出两个操作数的规则，反复弹出，并将结合结果压回操作数栈，直到能按照&lt;code>5.a&lt;/code>压入&lt;code>运算符栈&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>6 遇到&lt;code>)&lt;/code>时，反复按照规则弹出，直到&lt;code>运算符栈&lt;/code>顶为&lt;code>(&lt;/code>，最后移除栈顶的&lt;code>(&lt;/code>&lt;/li>
&lt;li>7 读取完毕后，&lt;code>操作数栈&lt;/code>留下的东西就是公式答案&lt;/li>
&lt;/ul>
&lt;p>这个就不再用动画演示了，本质上就是一般&lt;code>+-*/&lt;/code>运算双栈法的变种&lt;br>
唯一不一样的就是对于&lt;code>┐(非)&lt;/code>要注意连续弹出问题&lt;br>
因为&lt;code>┐(非)&lt;/code>是一个右结合单目运算符，而且优先级最高&lt;br>
如果不先处理调连续的&lt;code>┐(非)&lt;/code>容易解析出问题&lt;br>
所以要把连续的&lt;code>┐(非)&lt;/code>全弹出，当作一个整体，这样才能出正确答案&lt;/p>
&lt;h2 id="0x01-由双栈法构建运算树">&amp;lt;0x01&amp;gt; 由双栈法构建运算树
&lt;/h2>&lt;p>目前我们已经有方法解析合式公式了，但有一个问题&lt;br>
我们的题目要求给出一个真值表&lt;br>
如果每次计算我们都要先解析一遍合式公式的话，效率不会很高&lt;/p>
&lt;p>所以我们要用一种数据结构来保存计算的结构&lt;br>
每个单一操作数数可以改变对应的真假指派(就是&lt;code>T/F&lt;/code>)&lt;/p>
&lt;p>对于一个计算的过程，我们可以抽象成一个树&lt;br>
所有的操作数都是树的叶子(最末端的节点)&lt;br>
操作数由运算符连接，合成一个新节点&lt;br>
如此嵌套，最后连接在一个根节点上&lt;br>
每次计算时，先给操作数真假指派，然后走遍计算树，根节点的值就是公式的计算结果&lt;/p>
&lt;p>&lt;img src="https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/picture/2.png"
width="381"
height="279"
srcset="https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/picture/2_hu3266350209150046280.png 480w, https://mlacookie.github.io/article/posts/2023/%E6%B5%99%E5%B7%A5%E5%A4%A7%E7%A6%BB%E6%95%A3%E8%AF%BE%E8%AE%BE%E8%AE%B0%E5%BD%95/picture/2_hu16172601971619566491.png 1024w"
loading="lazy"
alt="计算树结构"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;br>
就是这么个结构&lt;/p>
&lt;p>怎么构建这棵树呢，其实之前的双栈法里就有这个答案&lt;br>
我们仅需略微更改下代码，操作数栈不存储运算结果而是存储运算节点&lt;br>
这样走一遍公式就相当于构建了一颗计算树&lt;br>
最后只要存储根节点就好了&lt;/p>
&lt;h2 id="0x02-逻辑实现">&amp;lt;0x02&amp;gt; 逻辑实现
&lt;/h2>&lt;h3 id="按从低到高的优先级列出运算符的枚举类型">按从低到高的优先级列出运算符的枚举类型
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Operator&lt;span style="color:#75715e">//枚举运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LeftBracket,&lt;span style="color:#75715e">//左括号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> XNOR,&lt;span style="color:#75715e">//双条件运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Odds,&lt;span style="color:#75715e">//条件运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Or,&lt;span style="color:#75715e">//析取运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> And,&lt;span style="color:#75715e">//合取运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Not,&lt;span style="color:#75715e">//取反运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="定义计算树的计算节点类仅列出定义">定义计算树的计算节点类(仅列出定义)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CalculateNode&lt;/span>&lt;span style="color:#75715e">//定义计算节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateNode? left;&lt;span style="color:#75715e">//运算符左边&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateNode? right;&lt;span style="color:#75715e">//运算符右边&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Operator oper;&lt;span style="color:#75715e">//节点的运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> ans;&lt;span style="color:#75715e">//该节点答案&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> CalculateNode(&lt;span style="color:#66d9ef">bool&lt;/span> ans);&lt;span style="color:#75715e">//末节点构造方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> CalculateNode(CalculateNode? left, CalculateNode right, Operatoroper);&lt;span style="color:#75715e">//计算节点构造方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Odds(&lt;span style="color:#66d9ef">bool&lt;/span> a, &lt;span style="color:#66d9ef">bool&lt;/span> b);&lt;span style="color:#75715e">//单独定义条件运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate(CalculateNode node);&lt;span style="color:#75715e">//从某节点递归计算&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate();&lt;span style="color:#75715e">//提供一个入口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ChangeAns(&lt;span style="color:#66d9ef">bool&lt;/span> ans);&lt;span style="color:#75715e">//改变末节点的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，每个计算节点包含运算符，左边节点，右边节点，节点答案&lt;br>
操作数节点仅有节点答案(所以左右节点的类型是可空类型)&lt;br>
因为条件运算符没有现成的运算符，所以自己写一个&lt;br>
&lt;code>Calculate(CalculateNode node)&lt;/code>通过递归来遍历每个节点并给出每个节点的答案&lt;br>
&lt;code>Calculate()&lt;/code>专门给外部调用的，里面就一句&lt;code>return Calculate(this);&lt;/code>&lt;br>
&lt;code>ChangeAns(bool ans)&lt;/code>用来改变操作数的真假指派&lt;/p>
&lt;h3 id="定义wellformedformula类仅列出定义">定义WellFormedFormula类(仅列出定义)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WellFormedFormula&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> formula;&lt;span style="color:#75715e">//原公式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, CalculateNode&amp;gt; map;&lt;span style="color:#75715e">//以string方式索引所有节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; dic;&lt;span style="color:#75715e">//以int方式索引所有根节点的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateNode root;&lt;span style="color:#75715e">//最终答案节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span>[] truthTable;&lt;span style="color:#75715e">//真值表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> IsOperator(&lt;span style="color:#66d9ef">char&lt;/span> c);&lt;span style="color:#75715e">//判断是否为二元运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> OperatorToChar(Operator op);&lt;span style="color:#75715e">//运算符换成char&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Operator CharToOperator(&lt;span style="color:#66d9ef">char&lt;/span> c);&lt;span style="color:#75715e">//char换成运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Verify();&lt;span style="color:#75715e">//验证公式是否有效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Init();&lt;span style="color:#75715e">//初始化计算树&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> WellFormedFormula(&lt;span style="color:#66d9ef">string&lt;/span> formula);&lt;span style="color:#75715e">//构造方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate(&lt;span style="color:#66d9ef">int&lt;/span> n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate(Dictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; keyValuePairs);&lt;span style="color:#75715e">//单独计算用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> CalculateAll();&lt;span style="color:#75715e">//全计算&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ChangeFormula(&lt;span style="color:#66d9ef">string&lt;/span> formula);&lt;span style="color:#75715e">//更改公式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowrTruthTable();&lt;span style="color:#75715e">//展示真值表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowFormula();&lt;span style="color:#75715e">//展示公式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowAllNode();&lt;span style="color:#75715e">//展示所有节点信息，用于调试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowTrueAssignment();&lt;span style="color:#75715e">//展示所有成真赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowFalseAssignment();&lt;span style="color:#75715e">//展示所有成假赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowDNF();&lt;span style="color:#75715e">//主析取范式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowCNF();&lt;span style="color:#75715e">//主合取范式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最关键的是&lt;code>Init()&lt;/code>方法，别的实现不难&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Init()&lt;span style="color:#75715e">//初始化计算树(略去实现细节)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Verify();&lt;span style="color:#75715e">//验证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取所有的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//构建计算树&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateAll();&lt;span style="color:#75715e">//顺便把真值表给算了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>Init()&lt;/code>中，先验证公式合法性(防输入错误)&lt;br>
然后会先遍历遍公式，获取所有的变量名并创建操作数节点(末节点)&lt;br>
然后再遍历一遍，构建计算树&lt;br>
构建完成后，&lt;code>root&lt;/code>指向根节点，&lt;code>map&lt;/code>可以按节点名索引到对应的操作数节点&lt;br>
&lt;code>dic&lt;/code>可以按&lt;code>index&lt;/code>索引到节点名字(方便遍历)&lt;br>
构建完再计算所有的赋值情况，直接得出真值表&lt;br>
其他的方法都是调用真值表答案，不会再计算公式&lt;/p>
&lt;p>构建过程就是双栈法构建&lt;/p>
&lt;h2 id="附录所有的代码">附录，所有的代码
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//核心逻辑实现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> CStest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Operator&lt;span style="color:#75715e">//枚举运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LeftBracket,&lt;span style="color:#75715e">//左括号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> XNOR,&lt;span style="color:#75715e">//双条件运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Odds,&lt;span style="color:#75715e">//条件运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Or,&lt;span style="color:#75715e">//析取运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> And,&lt;span style="color:#75715e">//合取运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Not,&lt;span style="color:#75715e">//取反运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CalculateNode&lt;/span>&lt;span style="color:#75715e">//定义计算节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateNode? left;&lt;span style="color:#75715e">//运算符左边&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateNode? right;&lt;span style="color:#75715e">//运算符右边&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Operator oper;&lt;span style="color:#75715e">//节点的运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> ans;&lt;span style="color:#75715e">//该节点答案&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> CalculateNode(&lt;span style="color:#66d9ef">bool&lt;/span> ans)&lt;span style="color:#75715e">//末节点构造方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.ans = ans;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> CalculateNode(CalculateNode? left, CalculateNode right, Operator oper)&lt;span style="color:#75715e">//计算节点构造方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.left = left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.right = right;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.oper = oper;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Odds(&lt;span style="color:#66d9ef">bool&lt;/span> a, &lt;span style="color:#66d9ef">bool&lt;/span> b)&lt;span style="color:#75715e">//单独定义条件运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!a)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate(CalculateNode node)&lt;span style="color:#75715e">//从某节点递归计算&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (node.right == &lt;span style="color:#66d9ef">null&lt;/span>)&lt;span style="color:#75715e">//递归边界条件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> node.ans;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (node.oper)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.Not:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node.ans = !Calculate(node.right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.And:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node.ans = Calculate(node.left) &amp;amp;&amp;amp; Calculate(node.right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.Or:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node.ans = Calculate(node.left) || Calculate(node.right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.Odds:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node.ans = Odds(Calculate(node.left), Calculate(node.right));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.XNOR:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node.ans = !(Calculate(node.left) ^ Calculate(node.right));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> node.ans;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate()&lt;span style="color:#75715e">//提供一个入口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Calculate(&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ChangeAns(&lt;span style="color:#66d9ef">bool&lt;/span> ans)&lt;span style="color:#75715e">//改变末节点的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.ans = ans;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WellFormedFormula&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> formula;&lt;span style="color:#75715e">//原公式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, CalculateNode&amp;gt; map;&lt;span style="color:#75715e">//以string方式索引所有节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; dic;&lt;span style="color:#75715e">//以int方式索引所有根节点的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateNode root;&lt;span style="color:#75715e">//最终答案节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span>[] truthTable;&lt;span style="color:#75715e">//真值表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> IsOperator(&lt;span style="color:#66d9ef">char&lt;/span> c)&lt;span style="color:#75715e">//判断是否为二元运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> c == &lt;span style="color:#e6db74">&amp;#39;∧&amp;#39;&lt;/span> || c == &lt;span style="color:#e6db74">&amp;#39;∨&amp;#39;&lt;/span> || c == &lt;span style="color:#e6db74">&amp;#39;→&amp;#39;&lt;/span> || c == &lt;span style="color:#e6db74">&amp;#39;⊙&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> OperatorToChar(Operator op)&lt;span style="color:#75715e">//运算符换成char&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (op)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.And: &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;∧&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.Or: &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;∨&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.Odds: &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;→&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Operator.XNOR: &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;⊙&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Operator CharToOperator(&lt;span style="color:#66d9ef">char&lt;/span> c)&lt;span style="color:#75715e">//char换成运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;∧&amp;#39;&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> Operator.And;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;∨&amp;#39;&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> Operator.Or;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;→&amp;#39;&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> Operator.Odds;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;⊙&amp;#39;&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> Operator.XNOR;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Operator.LeftBracket;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Verify()&lt;span style="color:#75715e">//验证公式是否有效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (IsOperator(formula[&lt;span style="color:#ae81ff">0&lt;/span>]) || formula[^&lt;span style="color:#ae81ff">1&lt;/span>] == &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span> || IsOperator(formula[^&lt;span style="color:#ae81ff">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Error in formula&amp;#34;&lt;/span>);&lt;span style="color:#75715e">//在首尾出现了不该出现的运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> l = &lt;span style="color:#ae81ff">0&lt;/span>;&lt;span style="color:#75715e">//统计左括号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> r = &lt;span style="color:#ae81ff">0&lt;/span>;&lt;span style="color:#75715e">//统计右括号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; formula.Length; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l++;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r++;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (IsOperator(formula[i + &lt;span style="color:#ae81ff">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Error in formula&amp;#34;&lt;/span>);&lt;span style="color:#75715e">//取反运算符后接别的运算符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (IsOperator(formula[i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (IsOperator(formula[i - &lt;span style="color:#ae81ff">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Error in formula&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (IsOperator(formula[i + &lt;span style="color:#ae81ff">1&lt;/span>]) || formula[i + &lt;span style="color:#ae81ff">1&lt;/span>] == &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Error in formula&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;span style="color:#75715e">//都是判断多个运算符不应该相连的情况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (l != r)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Error in formula&amp;#34;&lt;/span>);&lt;span style="color:#75715e">//左右括号数不匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Init()&lt;span style="color:#75715e">//初始化计算树&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Verify();&lt;span style="color:#75715e">//验证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> formula = &lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> + &lt;span style="color:#66d9ef">this&lt;/span>.formula + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取所有的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> index = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; formula.Length; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag &amp;amp;&amp;amp; formula[i] != &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &amp;amp;&amp;amp; formula[i] != &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span> &amp;amp;&amp;amp; !IsOperator(formula[i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index = i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> || formula[i] == &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span> || IsOperator(formula[i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (index != i &amp;amp;&amp;amp; !flag &amp;amp;&amp;amp; !map.ContainsKey(formula[index..i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.Add(formula[index..i], &lt;span style="color:#66d9ef">new&lt;/span> CalculateNode(&lt;span style="color:#66d9ef">false&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dic.Add(dic.Count, formula[index..i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//构建计算树&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; v = &lt;span style="color:#66d9ef">new&lt;/span> Stack&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;();&lt;span style="color:#75715e">//操作数栈&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&amp;lt;Operator&amp;gt; op = &lt;span style="color:#66d9ef">new&lt;/span> Stack&amp;lt;Operator&amp;gt;();&lt;span style="color:#75715e">//运算符栈&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> sa;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> sb;&lt;span style="color:#75715e">//两个临时string变量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; formula.Length; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span>)&lt;span style="color:#75715e">//左括号直接压入栈&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.Push(Operator.LeftBracket);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (flag &amp;amp;&amp;amp; formula[i] != &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &amp;amp;&amp;amp; formula[i] != &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span> &amp;amp;&amp;amp; !IsOperator(formula[i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index = i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> || formula[i] == &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span> || IsOperator(formula[i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (index != i &amp;amp;&amp;amp; !flag)&lt;span style="color:#75715e">//压入操作数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v.Push(formula[index..i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;┐&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.Push(Operator.Not);&lt;span style="color:#75715e">//取反直接压入&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (formula[i] == &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>)&lt;span style="color:#75715e">//遇到右括号不断弹出，直到遇到左括号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (op.Peek() != Operator.LeftBracket)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (op.Peek() == Operator.Not)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sa = v.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.Add(&lt;span style="color:#e6db74">&amp;#34;(┐&amp;#34;&lt;/span> + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> CalculateNode(&lt;span style="color:#66d9ef">null&lt;/span>, map[sa], Operator.Not));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v.Push(&lt;span style="color:#e6db74">&amp;#34;(┐&amp;#34;&lt;/span> + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sa = v.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb = v.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.Add(&lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> + sb + OperatorToChar(op.Peek()) + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> CalculateNode(map[sb], map[sa], op.Peek()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v.Push(&lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> + sb + OperatorToChar(op.Peek()) + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.Pop();&lt;span style="color:#75715e">//弹出左括号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (op.Count != &lt;span style="color:#ae81ff">0&lt;/span> &amp;amp;&amp;amp; CharToOperator(formula[i]) &amp;lt; op.Peek())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (op.Peek() == Operator.Not)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>&lt;span style="color:#75715e">//由于取反运算可多个连接，所以要一次性弹出所有连续的取反运算&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sa = v.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.Add(&lt;span style="color:#e6db74">&amp;#34;(┐&amp;#34;&lt;/span> + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> CalculateNode(&lt;span style="color:#66d9ef">null&lt;/span>, map[sa], Operator.Not));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v.Push(&lt;span style="color:#e6db74">&amp;#34;(┐&amp;#34;&lt;/span> + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">while&lt;/span> (op.Peek() == Operator.Not);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sa = v.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb = v.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.Add(&lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> + sb + OperatorToChar(op.Peek()) + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> CalculateNode(map[sb], map[sa], op.Peek()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v.Push(&lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> + sb + OperatorToChar(op.Peek()) + sa + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.Pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.Push(CharToOperator(formula[i]));&lt;span style="color:#75715e">//最后把当前运算符压入&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root = map[v.Pop()];&lt;span style="color:#75715e">//最后的操作数就是root节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> truthTable = &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>[(&lt;span style="color:#66d9ef">int&lt;/span>)Math.Pow(&lt;span style="color:#ae81ff">2&lt;/span>, dic.Count)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CalculateAll();&lt;span style="color:#75715e">//顺便把真值表给算了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> WellFormedFormula(&lt;span style="color:#66d9ef">string&lt;/span> formula)&lt;span style="color:#75715e">//构造方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, CalculateNode&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dic = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.formula = formula;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Init();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate(&lt;span style="color:#66d9ef">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> truthTable[n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> Calculate(Dictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; keyValuePairs)&lt;span style="color:#75715e">//单独计算用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (keyValuePairs.Count != dic.Count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exception();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> kv &lt;span style="color:#66d9ef">in&lt;/span> keyValuePairs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map[kv.Key].ChangeAns(kv.Value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> root.Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> CalculateAll()&lt;span style="color:#75715e">//全计算&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; b = &lt;span style="color:#66d9ef">new&lt;/span> Stack&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> index;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; (&lt;span style="color:#66d9ef">int&lt;/span>)Math.Pow(&lt;span style="color:#ae81ff">2&lt;/span>, dic.Count); i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index = i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (index &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (index % &lt;span style="color:#ae81ff">2&lt;/span> == &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b.Push(&lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b.Push(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index /= &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (b.Count &amp;lt; dic.Count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b.Push(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> j = &lt;span style="color:#ae81ff">0&lt;/span>; j &amp;lt; dic.Count; j++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map[dic[j]].ChangeAns(b.Pop());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> truthTable[i] = root.Calculate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ChangeFormula(&lt;span style="color:#66d9ef">string&lt;/span> formula)&lt;span style="color:#75715e">//更改公式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.formula = formula;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dic.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Init();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowrTruthTable()&lt;span style="color:#75715e">//展示真值表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; dic.Count; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(dic[i] + &lt;span style="color:#e6db74">&amp;#39;\t&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(formula);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; b = &lt;span style="color:#66d9ef">new&lt;/span> Stack&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> index;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; (&lt;span style="color:#66d9ef">int&lt;/span>)Math.Pow(&lt;span style="color:#ae81ff">2&lt;/span>, dic.Count); i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index = i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (index &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (index % &lt;span style="color:#ae81ff">2&lt;/span> == &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b.Push(&lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b.Push(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index /= &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (b.Count &amp;lt; dic.Count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b.Push(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (b.Count &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (b.Pop())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;T\t&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;F\t&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (truthTable[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;T&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;F&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowFormula()&lt;span style="color:#75715e">//展示公式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(formula);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowAllNode()&lt;span style="color:#75715e">//展示所有节点信息，用于调试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;| &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> m &lt;span style="color:#66d9ef">in&lt;/span> map)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(m.Key + &lt;span style="color:#e6db74">&amp;#34; | &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowTrueAssignment()&lt;span style="color:#75715e">//展示所有成真赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;All true assignment: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; dic.Count; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i == &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(dic[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34; | &amp;#34;&lt;/span> + dic[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> index;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&amp;lt;&lt;span style="color:#66d9ef">byte&lt;/span>&amp;gt; temp = &lt;span style="color:#66d9ef">new&lt;/span> Stack&amp;lt;&lt;span style="color:#66d9ef">byte&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; (&lt;span style="color:#66d9ef">int&lt;/span>)Math.Pow(&lt;span style="color:#ae81ff">2&lt;/span>, dic.Count); i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (truthTable[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index = i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (index &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp.Push((&lt;span style="color:#66d9ef">byte&lt;/span>)(index % &lt;span style="color:#ae81ff">2&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index /= &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (temp.Count &amp;lt; dic.Count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp.Push(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (temp.Count &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(temp.Pop());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> + i + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowFalseAssignment()&lt;span style="color:#75715e">//展示所有成假赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;All false assignment: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; dic.Count; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i == &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(dic[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34; | &amp;#34;&lt;/span> + dic[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> index;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack&amp;lt;&lt;span style="color:#66d9ef">byte&lt;/span>&amp;gt; temp = &lt;span style="color:#66d9ef">new&lt;/span> Stack&amp;lt;&lt;span style="color:#66d9ef">byte&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; (&lt;span style="color:#66d9ef">int&lt;/span>)Math.Pow(&lt;span style="color:#ae81ff">2&lt;/span>, dic.Count); i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!truthTable[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index = i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (index &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp.Push((&lt;span style="color:#66d9ef">byte&lt;/span>)(index % &lt;span style="color:#ae81ff">2&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index /= &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (temp.Count &amp;lt; dic.Count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp.Push(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (temp.Count &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(temp.Pop());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;(&amp;#34;&lt;/span> + i + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowDNF()&lt;span style="color:#75715e">//主析取范式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> count = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; (&lt;span style="color:#66d9ef">int&lt;/span>)Math.Pow(&lt;span style="color:#ae81ff">2&lt;/span>, dic.Count); i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (truthTable[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (count == &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;m(&amp;#34;&lt;/span> + i + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;∨m(&amp;#34;&lt;/span> + i + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count++;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ShowCNF()&lt;span style="color:#75715e">//主合取范式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> count = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; (&lt;span style="color:#66d9ef">int&lt;/span>)Math.Pow(&lt;span style="color:#ae81ff">2&lt;/span>, dic.Count); i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!truthTable[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (count == &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;M(&amp;#34;&lt;/span> + i + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">&amp;#34;∧M(&amp;#34;&lt;/span> + i + &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count++;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//main.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> CTest{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main(String[] args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WellFormedFormula w = &lt;span style="color:#66d9ef">new&lt;/span> WellFormedFormula(&lt;span style="color:#e6db74">&amp;#34;(P∨Q)∧(P→R)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.ShowAllNode();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.ShowrTruthTable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.ShowTrueAssignment();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.ShowFalseAssignment();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.ShowCNF();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.ShowDNF();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>